#!/bin/bash
# -*- mode: sh -*-

# convertor - tool for conversion and work DjVu files
#
# Author: Aleš Kapica <kapica@fel.cvut.cz>, 2015
#
# Použití...
# convertor [test] image
#	provede testovací konverzi pro všechny dostupné separační algoritmy didjvu
shopt -s extglob

# Changelog
# - ošetřena situace, kdy není nainstalován ocrodjvu
# - ošetřit situaci, kdy soubor neobsahuje žádný textový obsah a soubor dsed, ani xml neexistuje
# - mezi klíčové operace přidáno delete a insert
# - OCR zpracované do samostatné funkce
# - výchozí algoritmus djvu; testovací konverze pro všechny algoritmy se
#   provede pouze je-li uveden parametr --test-conversion
# - implementována rotace stránky
# - implementovány přesuny stránek (akce fore a back)
# - implementováno generování náhledů do exportu
# - upraveny funkce pro export náhledů a souborů textové vrstvy
# - implementována akce print pro výpis metadat

# Otestovat
# - export ze single-page dokumentu
#

# ToDo
# přepracovat použití djvudump na djvm -l (je rychlejší..)
# implementovat kontrolu do funkce todjvu, aby nedocházelo k nekontrolovatelnému vkládání již existujících stránek
# - přidat kontrolu do akce insert na duplicitní soubory při vkládání
#   vícestránkových DjVu souborů. to ovšem bude vyžadovat samostatnou
#   funkci...
# - dopsat nápovědu pro akci keywords-unset 
# - dopsat manuál pro akci set, argumenty, xmp, atp.
# - implementovat import
# doplnit nápovědu k rotaci stránky (akce rotate)
# opravit volby --algoritmus a --view
NAME="convertor"
[ -d "${HOME}/.config/${NAME}" ] &&	. ${HOME}/.config/${NAME}/* &>>/dev/null

LOG="${LOG=/dev/null}"
XML="${XML=no}"
DPI="${DPI=300}"
DSED="${DSED=no}"
PAGE="${PAGE=no}"
IMG="${IMG=no}"
INDIRECT="${INDIRECT=no}"
FORCE="${FORCE=skip}"
RENAME="no"
EXTENSION=".djvu"
THUMBNAIL="${THUMBNAIL=no}"
INSERTTEXT="${INSERTTEXT=no}"
ALG="${ALG=djvu}"
EXTRACTPAGE="${EXTRACTPAGE=no}"
IMGPAGE="${IMGPAGE=no}"
ALGORITHM="abutaleb bernsen brink djvu niblack otsu sauvola shading-subtraction"
TABS="8"

trap '''CHYBA=$? ;
case $CHYBA in
 20) echo "Není nainstalován balík djvu-tools"
 ;;
 21) echo "ERROR: mimetype - tool for detection type of image"
 ;;
 22) echo "ERROR: readlink - tool for detection absolute path of directory"
 ;;
 23) echo "Není nainstalován balík netpbm-sf"
 ;;
 24) "ERROR: imagemagick - tool for image convert is not installed"
 ;;
 31) echo "Není nainstalován balík ocrodjvu, na djvu soubory nelze aplikovat OCR. Buďto jej doinstalujte, nebo odstraňte z příkazové řádky parametr -o (--ocr)" >> /dev/stderr
 ;;
 32) echo "Pokud má při operaci zpracovat do DjVu bitmapový soubor, je třeba uvést na příkazové řádce parametrem -a jaký se má použít algoritmus. Jaké parametry lze použít se dozvíte pokud místo jména algoritmu napíšete znak ?" >> /dev/stderr
 ;;
 33) NORMDIR=yes
 ;;
esac
[ $NORMDIR ] || rm -rf -- "$TEMPDIR"
exit $CHYBA
''' EXIT

TEMPDIR=$(mktemp -d -p /tmp ${NAME}-XXX) || exit 1

#=== testy závislostí ===
# Dependencies:
#   * feh      ( http://feh.finalrewind.org/ )
#   * exiftool ( http://www.sno.phy.queensu.ca/~phil/exiftool ) in Debian package: libimage-exiftool-perl 
#   * yad      ( http://sourceforge.net/projects/yad-dialog )
REALPATH=$(which realpath)
[ ! ${REALPATH} ] && exit 1
REALPATH="$REALPATH -e "

DIDJVU=$(which didjvu)
[ ! ${DIDJVU} ] && echo 'Není nainstalován balík didjvu, nebude možné aplikovat pokročilé algoritmy pro separaci popředí při konverzi do DjVu' >> /dev/stderr && DIDJVU=false
OCRODJVU=$(which ocrodjvu)
[ ! ${OCRODJVU} ] && OCRODJVU=31
DJVIEW=$(which djview)
[ ! ${DJVIEW} ] && echo 'Není nainstalován balík djview, nebude fungovat testovací zobrazení djvu.souborů' >> /dev/stderr && DJVIEW=false
DDJVU=$(which ddjvu)
[ ! ${DDJVU} ] && exit 20
DJVUTXT=$(which djvutxt)
[ ! ${DJVUTXT} ] && exit 20
DJVUSED=$(which djvused)
[ ! ${DJVUSED} ] && exit 20
DJVUTOXML=$(which djvutoxml)
[ ! ${DJVUTOXML} ] && exit 20
DJVUXMLPARSER=$(which djvuxmlparser)
[ ! ${DJVUXMLPARSER} ] && exit 20
DJVUDUMP=$(which djvudump)
[ ! ${DJVUDUMP} ] && exit 20
DJVMCVT=$(which djvmcvt)
[ ! ${DJVMCVT} ] && exit 20
DJVM=$(which djvm)
[ ! ${DJVM} ] && exit 20
CJB2=$(which cjb2)
[ ! ${CJB2} ] && exit 20
DJVUMAKE=$(which djvumake)
[ ! ${DJVUMAKE} ] && exit 20
#YAD=$(which yad)
#[ ! ${YAD} ] && echo 'Není nainstalován balík yad' && exit 1
MIME=$(which mimetype)
[ ! -x "${MIME}" ] && exit 21
STAT=$(which readlink)
[ ! -x "${STAT}" ] && exit 22
EXIFTOOL=$(which exiftool)
[ ! -x "${EXIFTOOL}" ] && exit 23
TESSERACT=$(which tesseract)
[ ! -x "${TESSERACT}" ] && exit 31


NETPBM=0
PNMSCALE=$(which pnmscale)
[ ! -x "${PNMSCALE}" ] && NETPBM=1
if (( $NETPBM == 0 )); then
    VERSION=($(${PNMSCALE} -version 2>&1 | head -1))
    case ${VERSION[$((${#VERSION[@]} - 1))]} in
	10.0*|9*) echo "WARNING: Version Netpbm pnmacele don't support filters. I must use imagemagick convert" >> /dev/stderr
	    NETPBM=1
	    ;;
	*)  NETPBM=0
	    BMPTOPNM=$(which bmptopnm)
	    [ ! -x "${BMPTOPNM}" ] && exit 23
	    JPEGTOPNM=$(which jpegtopnm)
	    [ ! -x "${JPEGTOPNM}" ] && exit 23
	    GIFTOPNM=$(which giftopnm)
	    [ ! -x "${GIFTOPNM}" ] && exit 23
	    PNGTOPNM=$(which pngtopnm)
	    [ ! -x "${PNGTOPNM}" ] && exit 23
	    PNMTOJPEG=$(which pnmtojpeg)
	    [ ! -x "${PNMTOJPEG}" ] && exit 23
	    TIFFTOPNM=$(which tifftopnm)
	    [ ! -x "${TIFFTOPNM}" ] && exit 23
	    PNMTOPNG=$(which pnmtopng)
	    [ ! -x "${PNMTOPNG}" ] && exit 23
	    PNMTOPLAINPNM=$(which pnmtoplainpnm)
	    [ ! -x "${PNMTOPLAINPNM}" ] && exit 23
	    PPMTOPGM=$(which ppmtopgm)
	    [ ! -x "${PPMTOPGM}" ] && exit 23
	    PGMTOPBM=$(which pgmtopbm)
	    [ ! -x "${PGMTOPBM}" ] && exit 23
	    ;;
    esac
fi
if (( $NETPBM == 1 )) ; then
    CONVERT=$(which convert)
    [ ! -x "${CONVERT}" ] && echo exit 24
fi
#=== konec testu závislostí ===

## Pomocné funkce...
function tabs {
	# $1 - file with tabs
	local TAB=$(printf '%.0s\ ' {0..${TABS}})
	sed "s/\t/${TAB}/g" "${1}"
}

function escape_path {
# Zatím nepoužitá
	echo "escape_path $*" >> /dev/stderr
	echo "$*" | sed \
  -e 's/\ /\\\ /g'
}

function log {
	# $1 - závažnost hlášky
	# $2 - textový řetězec..
	# $DEBUG úroveň logování
	# $LOG - výstup (default - /dev/null
	case "${1}" in
		1) # Hlášky upřesňující místo ve skriptu
		echo "${@:2}" >> ${LOG}
		;;
		0) # Běžné hlášky
		echo "${1}" >> ${LOG}
		;;
		*)
		;;
	esac
}

function pushd {
    command pushd "$@" > /dev/null
}

function popd {
    command popd "$@" > /dev/null
}

function potvrdit {
    read -r -p "${1:-Opravdu chcete akci provést? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        [aA][nN][oO]|[aA]) 
            true
            ;;
        *)
            false
            ;;
    esac
}

function rozvazat {
	# $1 - soubor
	# $2 - adresář
	# $3 - indexový soubor
	echo "rozvazat - $1 - $2 - $3" >> /dev/stderr
	if [ -d "${2}" ] ; then
		if [ -z "${3}" ] ; then
			${DJVMCVT} -i ${1} ${2} index.djvu
		else
			${DJVMCVT} -i ${1} ${2} ${3}
		fi
	fi
}

function setmeta {
	# Funkce pro nastavení meta atrinutů
	# $1 - svazek
	# $2 - identifikátor, klíčové slovo nebo soubor
	# $3 - key
	# $4 - obsah klíče
	if [ -f ${2} ] ; then
		echo "Importuji atributy ze souboru ${2}" >> /dev/stderr
		${DJVUSED} ${1} -e "set-meta ${2}; save"
	else
		identifypage ${1} ${2}
		local NAMEPAGE=$(identifyname ${1} $?)
		if [ "${NAMEPAGE}" == "" ] ; then
			echo "Neplatný identifikátor stránky ${2}" >> /dev/stderr
			exit 12
		fi
		if [ "${3}" == "" ] ; then
			if [ -f ${NAMEPAGE/.djvu/.meta} ] ; then
				echo "Nastavuji klíč $3 do stránky $PAGE v souboru $1 s obsahem ${@:4}" >> /dev/stderr
				${DJVUSED} ${1} -e "select ${NAMEPAGE}; set-meta ${NAMEPAGE/.djvu/.meta}; save"
			fi
		else
			${DJVUSED} ${1} -e "select ${NAMEPAGE}; print-meta" > $TEMPDIR/${NAMEPAGE/.djvu/.meta}
			echo "${@:3}" >> $TEMPDIR/${NAMEPAGE/.djvu/.meta}
			${DJVUSED} ${1} -e "select ${NAMEPAGE}; set-meta $TEMPDIR/${NAMEPAGE/.djvu/.meta}; save"
		fi
	fi
}

function printmeta {
	# Funkce pro výpis meta atributů
	# $1 - svazek
	# $2 - identifikátor, klíčové slovo 'all' nebo atribut
	# $3 - atribut, nebo klíčové slovo 'all' (default)
	# není-li určena stránka ani key vypíše pro celý dokument

	local SOURCE=$(${REALPATH} -m -P "${1}")
	local FILE="${SOURCE##*/}"

	local CHARSTRING="$2"
	local CHARCOUNT=$((${#CHARSTRING} + 1))
	local CHARPOS=0
	local STRPOS=0
	while [ "${CHARCOUNT}" -gt "0" ] ; do
		case "${CHARSTRING:0:$((${CHARPOS} - ${STRPOS}))}" in
			*.[dD][jJ][vV][uU]) local PAGENAME="${CHARSTRING:0:$((${CHARPOS} - ${STRPOS}))}"
				log 1 "printmeta: Soubor... -${PAGENAME}-"
				local STRPOS="${CHARPOS}"
				local CHARSTRING="${CHARSTRING#${PAGENAME}}"
				log 1 "printmeta: CHARSTRING.. ${CHARSTRING}"
				local CHARCOUNT=$((${#CHARSTRING} + 1))
				log 1 "printmeta: CHARCOUNT.. ${CHARCOUNT}"
			;;
		esac
		local CHARPOS=$((CHARPOS + 1))
		local CHARCOUNT=$((CHARCOUNT - 1))
	done
	if [ -z "${PAGENAME}" ] ; then
		local TEMP=${CHARSTRING##+([[:blank:]])}
		local IDPAGE=${TEMP%%+([[:blank:]])*}
		local CHARSTRING=${TEMP#${IDPAGE}}
		local ATTR=${CHARSTRING##+([[:blank:]])}
		log 1 "printmeta: Meta atrinuty pro stránku IDPAGE -${IDPAGE}- parametr ATTR -${ATTR}-"
	else
		local NAMEPAGE=${PAGENAME##+([[:blank:]])}
		local TARGETDIR=${CHARSTRING##+([[:blank:]])}
		log 1 "printmeta: Meta atributy stránky NAMEPAGE -${NAMEPAGE}- parametr ATTR -${ATTR}-"
	fi


echo "SOURCE -${SOURCE}- IDPAGE -${IDPAGE}- NAMEPAGE -${NAMEPAGE}- parametr ATTR ${ATTR}" >> /dev/stderr
if [ -z "${NAMEPAGE}" ] ; then
	local PAGE=$(identifyname "${SOURCE}" "${IDPAGE}")
else
	local PAGE=$(identifyname "${SOURCE}" "${NAMEPAGE}")
fi

if [ "${PAGE}" == "" ] ; then
	if [ -z "${IDPAGE}" ] ; then
	echo "Globální meta atributy svazku ${FILE} :" >> /dev/stderr
	else
	local ATTR="${IDPAGE}"
	echo "Globání atribut ${ATTR} svazku ${FILE} :" >> /dev/stderr
	fi
	local METAKEYS=$(${DJVUSED} "${SOURCE}" -e print-meta)
else
	if [ -z "${ATTR}" ] ; then
	echo "Meta atributy stránky ${PAGE} ze svazku ${FILE}:" >> /dev/stderr
	else
	local ATTR="${IDPAGE}"
	echo "Meta atribut ${ATTR} stránky ${PAGE} ze svazku ${FILE}:" >> /dev/stderr
	fi
	local METAKEYS=$(${DJVUSED} ${SOURCE} -e "select '${PAGE}'; print-meta")
fi

# Zpracování...
	local IFS_BAK=$IFS
	local IFS=$'\n'
	for i in ${METAKEYS} ; do
		if [ "${ATTR}" == "" ] || [ "${ATTR}" == "all" ] ; then
			echo -e "$(echo $i | sed 's/\\/\\0/g')"
		else
			local KEY=$(echo $i | grep "^${ATTR}[[:blank:]]" | sed 's/\\/\\0/g')
			if [ "$KEY" == "" ] ; then
				continue
			else
				echo -e "xxx ${KEY}"
			fi
		fi
	done
	local IFS=$IFS_BAK

exit 0
	if [ "${2}" = "" ] ; then
		echo "Globální metadata souboru ${1##*/} :" >> /dev/stderr
		METAKEYS=$(${DJVUSED} ${1} -e print-meta)
		IFS_BAK=$IFS
		IFS=$'\n'
		for i in $METAKEYS ; do
			echo -e $(echo $i | sed 's/\\/\\0/g')
		done
		IFS=$IFS_BAK
	else
		PAGE=$(identifypage "${1}" "${2}")
		local NAMEPAGE=$(identifyname ${1} ${PAGE})
		if [ "${NAMEPAGE}" == "" ] ; then
			if [ "${2}" == "all" ] ; then
				echo "Globální metadata souboru ${1##*/} :" >> /dev/stderr
			else
				if [ "${2/[0-9]/}" == "" ] ; then
					lastpage ${1}
					LASTPAGE=$?
					if [ ${2} -gt ${LASTPAGE} ] ; then
						echo "Požadovaná stránka je mimo rozsah souboru ${1##*/}, který má ${LASTPAGE} a požadovaná stránka se v něm nevyskytuje" >> /dev/stderr
					else
						echo "Globální metadata souboru ${1##*/} - atribut ${2}:" >> /dev/stderr
					fi
				else
					echo "Stránka ${2} se v souboru ${1##*/} nevyskytuje" >> /dev/stderr
					exit 1
				fi
			fi
			METAKEYS=$(${DJVUSED} ${1} -e "print-meta")
			IFS_BAK=$IFS
			IFS=$'\n'
			for i in $METAKEYS ; do
				if [ "${2}" == "all" ] ; then
					echo -e $(echo $i | sed 's/\\/\\0/g')
				else
					KEY=$(echo $i | grep "^${2}[[:blank:]]" | sed 's/\\/\\0/g')
					if [ "$KEY" == "" ] ; then
						continue
					else
						echo -e $KEY
					fi
				fi
			done
			IFS=$IFS_BAK
		else
			if [ "${3}" == "" ] || [ "${3}" == "all" ] ; then
				echo "Metadata stránky ${NAMEPAGE} ( $PAGE ) ze souboru ${1##*/} :" >> /dev/stderr
			else
				echo "Metadata stránky ${NAMEPAGE} ( $PAGE ) ze souboru ${1##*/} - atribut ${3}:" >> /dev/stderr
			fi
			METAKEYS=$(${DJVUSED} ${1} -e "select ${NAMEPAGE}; print-meta")
			IFS_BAK=$IFS
			IFS=$'\n'
			for i in $METAKEYS ; do
				if [ "${3}" == "" ] || [ "${3}" == "all" ] ; then
					echo -e $(echo $i | sed 's/\\/\\0/g')
				else
					KEY=$(echo $i | grep "^${3}[[:blank:]]" | sed 's/\\/\\0/g')
					if [ "$KEY" == "" ] ; then
						continue
					else
						echo -e $KEY
					fi
				fi
			done
			IFS=$IFS_BAK
		fi
	fi
}

function unsetmeta {
	# ToDo
	# Funkce pro odstranění meta atributu
	# $1 - svazek
	# $2 - identifikátor, klíčové slovo nebo soubor
	# $3 - key
	identifypage ${1} ${2}
	local NAMEPAGE=$(identifyname ${1} $?)
	if [ "${NAMEPAGE}" == "" ] ; then
		echo "Odstraňuji globální atribut.."
		${DJVUSED} ${1} -e "print-meta" > ${TEMPDIR}/${1/.djvu/.temp}
		grep -v "^$2[[:blank:]]" ${TEMPDIR}/${1/.djvu/.temp} >> $TEMPDIR/${1/.djvu/.meta}
		potvrdit && ${DJVUSED} ${1} -e "set-meta $TEMPDIR/${1/.djvu/.meta}; save"
	elif [ "${3}" == "" ] ; then
		echo "Odstraňuji všechny meta informace ze stránky.."
		potvrdit && ${DJVUSED} ${1} -e "select ${NAMEPAGE}; remove-meta; save"
	elif [ "${2}" == "global" ] ; then
		echo "Odstraňuji všechny globální meta informace.."
		potvrdit && ${DJVUSED} ${1} -e "remove-meta; save"
	else
		echo "Odstraňuji atribut ${3} z meta informací stránky ${NAMEPAGE}"
		echo "$1 - $2 - $3 - $NAMEPAGE"
		${DJVUSED} ${1} -e "select ${NAMEPAGE}; print-meta" > ${TEMPDIR}/${NAMEPAGE/.djvu/.temp}
		grep -v "^$3[[:blank:]]" ${TEMPDIR}/${NAMEPAGE/.djvu/.temp} >> ${TEMPDIR}/${NAMEPAGE/.djvu/.meta}
		potvrdit && ${DJVUSED} ${1} -e "select ${NAMEPAGE}; set-meta $TEMPDIR/${NAMEPAGE/.djvu/.meta}; save"
	fi
}

function import {
	# Import nevkládá nové stránky, ale importuje soubory textové vrstvy
	# $1 - DjVu file
	# $2 - soubor identifikátor + cílový adresář
	echo "1- ${1}" >> /dev/stderr
	echo "2- ${2}" >> /dev/stderr
	echo "3- ${3}" >> /dev/stderr
	local SOURCE=$(${REALPATH} -m -P "${1}")
	local FILE="${SOURCE##*/}"
	if [ -z "${2}" ] ; then
		local FROM=$(${REALPATH} -m -P "$(pwd)")
	else
		local FROM=$(${REALPATH} -m -P "${2}")
	fi

	if [ -d "${FROM}" ] ; then
		# Parsing $2
		# Může být adresář.. Pak se nasypou z tohoto adresáře do souboru všechny soubory dle voleb
		# Může být soubor.. Pak se nasype pouze obsah tohoto souboru..
#		echo "V adresář ${FROM} vyhledám soubory, jejichž obsah bude možné naimportovat do souboru ${FILE}" >> /dev/stderr
#		echo "Priorita je následující - nejprve naimportuji soubory dsed (pokud existují) a pak XML (pokud existují). Na závěr pak naimportuji meta" >> /dev/stderr
		local LIST=$(list "${SOURCE}")
		local IFS_BAK=$IFS
		local IFS=$'\n'
		for i in  ${LIST} ; do
			local PAGENAME="${i##*:}"
			log 1 "import: Hledám soubory pro import dat do stránky ${PAGENAME} v souboru ${FILE}"
			if [ -f "${FROM}/${PAGENAME/.djvu/.dsed}" ] ; then
				importdsedpage "${SOURCE}" "${PAGENAME}" "${FROM}/${PAGENAME/.djvu/.dsed}"
			fi
			if [ -f "${FROM}/${PAGENAME/.djvu/.xml}" ] ; then
				importxmlpage "${SOURCE}" "${FROM}/${PAGENAME/.djvu/.xml}"
			fi
			if [ -f "${FROM}/${PAGENAME/.djvu/.meta}" ] ; then
				importmetapage "${SOURCE}" "${PAGENAME}" "${FROM}/${PAGENAME/.djvu/.meta}"
			fi
		done
		local IFS=$IFS_BAK
		log 1 "import: Importuji meta atributy a obsah pro celý soubor ${FILE}"
		# Import obsahu souboru..
		if [ -f "${FROM}/${FILE/.djvu/.meta}" ] ; then
			importmetaall "${SOURCE}" "${FROM}/${FILE/.djvu/.meta}"
		fi
		if [ -f "${FROM}/${FILE/.djvu/.outline}" ] ; then
			importoutline "${SOURCE}" "${FROM}/${FILE/.djvu/.outline}"
		fi
	elif [ -f "${FROM}" ] ; then
		if [ "${FILE%.*}" == "${FROMFILE%.*}" ] ; then
			local FROMFILE="${FROM##*/}"
			log 1 "import: Importuji textová data do svazku ${FROMFILE}"
			case "${FROMFILE}" in
				*.dsed) importdsedall "${SOURCE}" "${FROM}"
				;;
				*.meta) importmetaall "${SOURCE}" "${FROM}"
				;;
				*.outline) importoutline "${SOURCE}" "${FROM}"
				;;
				*.xml) importxmlpage "${SOURCE}" "${FROM}"
				;;
				*) echo "import: Při importu textových dat do celého svazku jsou akceptovány pouze soubory s příponou .dsed, .xml, .outline a .meta" >> /dev/stderr
				;;
			esac
		else
			local FROMFILE="${FROM##*/}"
			log 1 "import: Importuji data do stránky ${FROMFILE}"
			local LIST=$(list "${SOURCE}")
			local IFS_BAK=$IFS
			local IFS=$'\n'
			for i in  ${LIST} ; do
				local PAGENAME="${i##*:}"
				if [ "${PAGENAME%.*}" == "${FROMFILE%.*}" ] ; then
					echo "Importuji data ze souboru ${FROM} do stránky ${PAGENAME} v souboru ${FILE}" >> /dev/stderr
					case "${FROMFILE}" in
						*.dsed) importdsedpage "${SOURCE}" "${PAGENAME}" "${FROM}"
						;;
						*.meta) importmetapage "${SOURCE}" "${PAGENAME}" "${FROM}"
						;;
						*.xml) importxmlpage "${SOURCE}" "${FROM}"
						;;
						*) echo "import: Při importu textových dat do stránky jsou akceptovány pouze soubory s příponou .dsed, .xml a .meta" >> /dev/stderr
						;;
					esac
				fi
			
			done
			local IFS=$IFS_BAK
		fi
	else
		echo "import: Parametrem akce import může být buď adresář se soubory, nebo soubor s daty k importu" >> /dev/stderr
		exit 1
	fi
}

function export {
	# $1 - DjVu file
	# $2 - identifikátor + cílový adresář
	local SOURCE=$(${REALPATH} -m -P "${1}")
	local FILE="${SOURCE##*/}"

	# Parsing $2
	local CHARSTRING="$2"
	local CHARCOUNT=$((${#CHARSTRING} + 1))
	local CHARPOS=0
	local STRPOS=0
	while [ "${CHARCOUNT}" -gt "0" ] ; do
		case "${CHARSTRING:0:$((${CHARPOS} - ${STRPOS}))}" in
			*.[dD][jJ][vV][uU]) local PAGENAME="${CHARSTRING:0:$((${CHARPOS} - ${STRPOS}))}"
				local STRPOS="${CHARPOS}"
				local CHARSTRING="${CHARSTRING#${PAGENAME}}"
				local CHARCOUNT=$((${#CHARSTRING} + 1))
			;;
		esac
		local CHARPOS=$((CHARPOS + 1))
		local CHARCOUNT=$((CHARCOUNT - 1))
	done

	if [  -z "${CHARSTRING}" ] ; then
		if [ -z "${PAGENAME}" ] ; then
			log 1 "export: Export all pages from ${FILE} into aktual directory - do set TARGETDIR"
			local TARGETDIR=$(targetdir $(pwd))
			exportdjvuall "${SOURCE}" "${TARGETDIR}"
			return 0
		else
			log 1 "export: Export page identificated by ${PAGENAME} from ${FILE} into aktual directory - do set TARGETDIR"
			local IDPAGE=$(identifypage "${SOURCE}" "${PAGENAME}")
			[ -z "${IDPAGE}" ] && echo "export: In ${FILE} is not any page identificated by ${PAGENAME}"  >> /dev/stderr &&  exit 1
			local NAMEPAGE=$(identifyname "${SOURCE}" "${PAGENAME}")
			local TARGETDIR=$(targetdir $(pwd))
		fi
	else
		if [ -z "${PAGENAME}" ] ; then
			local TEMP=${CHARSTRING##+([[:blank:]])}
			local IDPAGE=${TEMP%%+([[:blank:]])*}
			local CHARSTRING=${TEMP#${IDPAGE}}
			local TARGETDIR=${CHARSTRING##+([[:blank:]])}
			# Tady může být nějaký jiný parametr, než pořadové číslo, a také TARGETDIR může být prázdný.
			if [ "${IDPAGE}" == "all" ] ; then
				if [ -z "${TARGETDIR}" ] ; then
					log 1 "export: Export all pages from ${FILE} into actual directory - do set TARGETDIR"
					local TARGETDIR=$(targetdir $(pwd))
					exportdjvuall "${SOURCE}" "${TARGETDIR}"
					return 0
				else
					log 1 "export: Export all pages from ${FILE} into ${TARGETDIR}"
					local TARGETDIR=$(targetdir "${TARGETDIR}")
					exportdjvuall "${SOURCE}" "${TARGETDIR}"
					return 0
				fi
			else
				log 1 "export: Export page identificated by order -${IDPAGE}- from ${FILE} into -${TARGETDIR}-"
				local NAMEPAGE=$(identifyname "${SOURCE}" "${IDPAGE}")
				[ -z "${NAMEPAGE}" ] && echo "export: In ${FILE} is not any page on position ${IDPAGE}"  >> /dev/stderr &&  exit 1
				local TARGETDIR=$(targetdir "${TARGETDIR}")
			fi
		else
			local NAMEPAGE=${PAGENAME##+([[:blank:]])}
			local TARGETDIR=${CHARSTRING##+([[:blank:]])}
			log 1 "export: Export page identificated by name -${NAMEPAGE}- from ${FILE} into -${TARGETDIR}-"
			local IDPAGE=$(identifypage "${SOURCE}" "${NAMEPAGE}")
			[ -z "${IDPAGE}" ] && echo "export: In ${FILE} is not any page with name ${NAMEPAGE}" >> /dev/stderr &&  exit 1
			local TARGETDIR=$(targetdir "${TARGETDIR}")
		fi
	fi

#	echo "export: SOURCE ${SOURCE}">> /dev/stderr
#	echo "export: FILE ${FILE}">> /dev/stderr
#	echo "export: IDPAGE ${ODPAGE}">> /dev/stderr
#	echo "export: NAMEPAGE ${NAMEPAGE}">> /dev/stderr
#	echo "export: TARGETDIR ${TARGETDIR}">> /dev/stderr
#	echo "export: FORCE ${FORCE}">> /dev/stderr
	[ "${PAGE}" != "no" ] && exportdjvupage "${SOURCE}" "${NAMEPAGE}" "${TARGETDIR}" || echo "export: For export page in DjVu format we must use option -p" >> /dev/stderr
	[ "${DSED}" != "no" ] && exportdsedpage "${SOURCE}" "${NAMEPAGE}" "${TARGETDIR}" || echo "export: For export text content from DjVu page in dsed format we must use option -d" >> /dev/stderr
	[ "${XML}" != "no" ] && exportxmlpage "${SOURCE}" "${NAMEPAGE}" "${TARGETDIR}" || echo "export: For export hidden text layer of pages from DjVu bundle in XML format we must use option -x" >> /dev/stderr
	[ "${IMG}" != "no" ] && exportimgpage "${SOURCE}" "${NAMEPAGE}" "${TARGETDIR}" || echo "export: For export image of page from DjVu bundle we must use option -i" >> /dev/stderr
}

function exportdjvuall {
	# $1 - DjVu file - full path
	# $2 - targetdir - full path
	[ "${PAGE}" != "no" ] || echo "exportdjvuall: For export pages in DjVu format we must use option -p" >> /dev/stderr
	[ "${DSED}" != "no" ] || echo "exportdjvuall: For export hidden text layer of pages from DjVu bundle in dsed format we must use option -d" >> /dev/stderr
	[ "${XML}" != "no" ] || echo "exportdjvuall: For export hidden text layer of pages from DjVu bundle in XML format we must use option -x" >> /dev/stderr
	[ "${IMG}" != "no" ] || echo "exportdjvuall: For export image of page from DjVu bundle we must use option -i" >> /dev/stderr
	local PAGES=$(lastpage "${SOURCE}")
	local NUMPAGE=1
	while [ ${PAGES} -gt "0" ] ; do
		local NAMEPAGE=$(identifyname "${SOURCE}" "${NUMPAGE}")
		log 1 "exportdjvuall: Exportuji stránku ${NAMEPAGE}"
		exportdjvupage "${1}" "${NAMEPAGE}" "${2}"
		exportdsedpage "${1}" "${NAMEPAGE}" "${2}"
		exportxmlpage "${1}" "${NAMEPAGE}" "${2}"
		exportimgpage "${1}" "${NAMEPAGE}" "${2}"
		local NUMPAGE=$((NUMPAGE + 1))
		local PAGES=$((PAGES - 1))
	done
	exportdsedbundle "${1}" "${2}"
	exportxmlbundle "${1}" "${2}"
}

function exportdsedbundle {
	# $1 - DjVu file - full path
	# $2 - targetdir - full path
	local FILE="${1##*/}"
	pushd "${2}"
	case "${DSED}" in
		yes|all) local EXPORT="output-all"
		;;
		txt) local EXPORT="output-txt"
		;;
		ant) local EXPORT="output-ant"
		;;
		no) return 0
		;;
	esac
	if [ "${DSED}" != "no" ] ; then
		local TARGET="${FILE/.djvu/.dsed}"
		if [ -f "${TARGET}" ] ; then
			if [ "${FORCE}" == "yes" ] ; then
				${DJVUSED} "${1}" -e "${EXPORT}" > "${TARGET}"
			elif [ "${FORCE}" == "skip" ] ; then
				log 1 "exportdsedbundle: Soubor ${TARGET} již v adresáři ${3} existuje."
			else
				echo "exportdsedbundle: Soubor ${TARGET} již v adresáři ${3} existuje.." >> /dev/stderr
				potvrdit && ${DJVUSED} "${1}" -e "${EXPORT}" > "${TARGET}"
			fi
		else
			${DJVUSED} "${1}" -e "${EXPORT}" > "${TARGET}"
		fi
	fi
	popd
}

function exportxmlbundle {
	# $1 - DjVu file - full path
	# $2 - targetdir - full path
	local FILE="${1##*/}"
	pushd "${2}"
	case "${XML}" in
		yes|all) local EXPORT="--with-text --with-anno"
		;;
		txt) local EXPORT="--with-text --without-anno"
		;;
		ant) local EXPORT="--without-text --with-anno"
		;;
		no) return 0
		;;
	esac
	if [ "${XML}" != "no" ] ; then
		local TARGET="${FILE/.djvu/.xml}"
		if [ -f "${TARGET}" ] ; then
			if [ "${FORCE}" == "yes" ] ; then
				${DJVUTOXML} "${1}" "${TARGET}"
			elif [ "${FORCE}" == "skip" ] ; then
				log 1 "exportxmlbundle: Soubor ${TARGET} již v adresáři ${3} existuje."
			else
				echo "exportxmlbundle: Soubor ${TARGET} již v adresáři ${3} existuje.." >> /dev/stderr
				potvrdit && ${DJVUTOXML} "${1}" "${TARGET}"
			fi
		else
			${DJVUTOXML} "${1}" "${TARGET}"
		fi
	fi
	popd
}

function exportimgpage {
	# $1 - DjVu file - full path
	# $2 - identificator - page name
	# $3 - targetdir - full path
	pushd "${3}"
	case "${IMG}" in
		yes) local EXPORT="-mode=color"
		;;
		color|black|foreground|background|mask) local EXPORT="-mode=${IMG}"
		;;
		no) return 0
		;;
	esac
	if [ "${IMG}" != "no" ] ; then
		local PAGE=$(identifypage "${1}" "${2}")
		local TARGET="${2/.djvu/.png}"
		if [ -f "${TARGET}" ] ; then
			if [ "${FORCE}" == "yes" ] ; then
				${DDJVU} -format=pnm "${EXPORT}" -page="${PAGE}" "${1}" | ${PNMTOPNG} > "${TARGET}"
			elif [ "${FORCE}" == "skip" ] ; then
				log 1 "exportimgpage: Soubor ${TARGET} již v adresáři ${3} existuje."
			else
				echo "exportimgpage: Soubor ${TARGET} již v adresáři ${3} existuje.." >> /dev/stderr
				potvrdit && ${DDJVU} -format=pnm "${EXPORT}" -page="${PAGE}" "${1}" | ${PNMTOPNG} > "${TARGET}"
			fi
		else
			${DDJVU} -format=pnm "${EXPORT}" -page="${PAGE}" "${1}" | ${PNMTOPNG} > "${TARGET}"
		fi
	fi
	popd
}

function exportxmlpage {
	# $1 - DjVu file - full path
	# $2 - identificator - page name
	# $3 - targetdir - full path
	pushd "${3}"
	case "${XML}" in
		yes|all) local EXPORT="--with-text --with-anno"
		;;
		txt) local EXPORT="--with-text --without-anno"
		;;
		ant) local EXPORT="--without-text --with-anno"
		;;
		no) return 0
		;;
	esac
	if [ "${XML}" != "no" ] ; then
		local PAGE=$(identifypage "${1}" "${2}")
		local TARGET="${2/.djvu/.xml}"
		if [ -f "${TARGET}" ] ; then
			if [ "${FORCE}" == "yes" ] ; then
				${DJVUTOXML} --page "${PAGE}" ${EXPORT} "${1}" "${TARGET}"
			elif [ "${FORCE}" == "skip" ] ; then
				log 1 "Soubor ${TARGET} již v adresáři ${3} existuje."
			else
				echo "Soubor ${TARGET} již v adresáři ${3} existuje.." >> /dev/stderr
				potvrdit && ${DJVUTOXML} --page "${PAGE}" ${EXPORT} "${1}" "${TARGET}"
			fi
		else
			${DJVUTOXML} --page "${PAGE}" ${EXPORT} "${1}" "${TARGET}"
		fi
	fi
	popd
}

function importmetapage {
	# $1 - soubor se stránkou
	# $2 - identifikátor stránky
	# $3 - soubor s meta atributy
	echo "importmetapage: Importuji meta atributy do jedné stránky" >> /dev/stderr
	${DJVUSED} "${1}" -e "select '${2}'; set-meta ${3}; save"
}

function importmetaall {
	# $1 - soubor se stránkou
	# $2 - soubor s meta atributy
	echo "importmetaall: Importuji meta atributy pro celý svazek" >> /dev/stderr
	${DJVUSED} "${1}" -e "select; set-meta ${2}; save"
}

function importoutline {
	# $1 - DjVu file - full path
	# $2 - outline file
	parseoutline "${2}"
	local TARGET="${TEMPDIR}/outline.dsed"
	local CONTENT=$(tabs "${TARGET}" | od -A n -t c | tr '\n' '+' | sed 's/+//g' )
	local COUNT=${#CONTENT}
	local POS=0
	local STEP=4
	local OUTLINE=""
	while [ "${COUNT}" -gt "0" ]
	do
		local STRING="${CONTENT:${POS}:$STEP}"
		local CHAR="${STRING##+([[:blank:]])}"
#		echo "${#STRING} -${STRING}-" >> /dev/stderr
#		echo "${#CHAR} -${CHAR}-" >> /dev/stderr
		if [ -z "${CHAR}" ] ; then
			local OUTLINE="${OUTLINE} "
		elif [ "${#CHAR}" == "3" ] ; then
			local OUTLINE="${OUTLINE}\\${CHAR}"
		else
			local OUTLINE="${OUTLINE}${CHAR}"
		fi
		local POS=$((POS + ${STEP}))
		local COUNT=$((COUNT - ${STEP}))
	done
	echo "${OUTLINE}" | tee > ${TEMPDIR}/final_outline.dsed
	${DJVUSED} "${1}" -e "set-outline ${TEMPDIR}/final_outline.dsed; save"
	exit 33
}

function parseoutline {
	# $1 - outline file
	local TARGET="${TEMPDIR}/outline.dsed"
	# počet mezer odpovídá použitému odsazení
	local TABS='    '
	# počet závorek ovlivňuje počet zpracovatelných úrovní
	local O='(((((('
	local C='))))))'

	local LEVEL=""
	local IFS=''
	local LINES=1
	printf '%s' '(bookmarks ' >> ${TARGET}
	while read line ; do
		local NEW="${line##+( )}"
		local TAB="${line%${NEW}}"
		if [ "${line}" == "" ] ; then
			if [ "${#LEVEL}" -gt "0" ] ; then
				local COUNT=0
				while [ "${#LEVEL}" -gt "0" ] ; do
					local COUNT=$((COUNT+1))
					local LEVEL="${LEVEL%${TABS}}"
				done
				printf '%s' ${C:0:$((COUNT+1))} >> ${TARGET}
			fi
		elif [ "${#LEVEL}" -eq "${#TAB}" ] ; then
			if [ "${LINES}" == "1" ] ; then
				printf '%s' '(' >> ${TARGET}
				printf '%s' ${line##+([[:blank:]])} >> ${TARGET}
			else
				printf '%s' ')(' >> ${TARGET}
				printf '%s' ${line##+([[:blank:]])} >> ${TARGET}
			fi
			local LEVEL=${TAB}
		elif [ "${#LEVEL}" -gt "${#TAB}" ] ; then
			local COUNT=0
			while [ "${#LEVEL}" -gt "${#TAB}" ] ; do
				local COUNT=$((COUNT+1))
				local LEVEL="${LEVEL%${TABS}}"
			done
			printf '%s' ${C:0:$(($COUNT+1))} >> ${TARGET}
			printf '%s' '(' >> ${TARGET}
			printf '%s' ${line##+([[:blank:]])} >> ${TARGET}
		elif [ "${#TAB}" -gt "${#LEVEL}" ] ; then
			local COUNT=0
			while [ "${#TAB}" -gt "${#LEVEL}" ] ; do
				local COUNT=$((COUNT+1))
				local LEVEL="${LEVEL}${TABS}"
			done
			printf '%s' ${O:0:$COUNT} >> ${TARGET}
			printf '%s' ${line##+([[:blank:]])} >> ${TARGET}
		else
			echo "Jiná varianta" >> /dev/stderr
		fi
		local LINES=$((LINES+1))
	done <  "${1}"
	printf '%s' '))' >> ${TARGET}
}

function importdsedall {
	case "${DSED}" in
		# Vytvořit dočasný soubor s následující hlavičkou...
		# -e "select '${2}'; remove-ant; remove-txt"
		# -------------------------
		# time awk '/^set-ant$/{flag=1;next} ; /^.$/{flag=0}; flag' vysledek.dsed 
		all|yes) # nejprve ant, pak text..
		${DJVUSED} "${1}" -f "${2}" -s
		;;
		no)
		;;
	esac
}

function importdsedpage {
	# $1 - DjVu file - full path
	# $2 - identificator - page name
	# $3 - source DSED file - full path
	echo "Import META informací.." >> /dev/stderr
}
function importdsedpage {
	# $1 - DjVu file - full path
	# $2 - identificator - page name
	# $3 - source DSED file - full path
	case "${DSED}" in
		# Vytvořit dočasný soubor s následující hlavičkou...
		# -e "select '${2}'; remove-ant; remove-txt"
		# -------------------------
		# time awk '/^set-ant$/{flag=1;next} ; /^.$/{flag=0}; flag' vysledek.dsed 
		all|yes) awk '/^set-ant$/{flag=1;next} ; /^.$/{flag=0}; flag' "${3}" > ${TEMPDIR}/${2}.ant
			${DJVUSED} "${1}" -e "select '${2}'; set-ant ${TEMPDIR}/${2}.ant ; save"
			awk '/^set-txt$/{flag=1;next} ; /^.$/{flag=0}; flag' "${3}" > ${TEMPDIR}/${2}.txt
			${DJVUSED} "${1}" -e "select '${2}'; set-txt ${TEMPDIR}/${2}.txt ; save"
		;;
		ant) awk '/^set-ant$/{flag=1;next} ; /^.$/{flag=0}; flag' "${3}" > ${TEMPDIR}/${2}.ant
			${DJVUSED} "${1}" -e "select '${2}'; set-ant ${TEMPDIR}/${2}.ant ; save"
		;;
		txt) awk '/^set-txt$/{flag=1;next} ; /^.$/{flag=0}; flag' "${3}" > ${TEMPDIR}/${2}.txt
			${DJVUSED} "${1}" -e "select '${2}'; set-txt ${TEMPDIR}/${2}.txt ; save"
		;;
		no) echo "K importu textových dat ze souboru ${3} se přistoupí pouze bude-li uvedena volba -d" >> /dev/stderr
		;;
	esac
}

function importxmlpage {
	# $1 - DjVu file - full path
	# $2 - source XML file - full path
	# INFO: XML file has name of target page in self.
	case "${XML}" in
		no) echo "K importu textových dat ze souboru ${2} se přistoupí pouze bude-li uvedena volba -x" >> /dev/stderr
		;;
		*) ${DJVUXMLPARSER} -o "${1}" "${2}"
		;;
	esac
}

function exportmetabundle {
	# $1 - DjVu file - full path
	# $2 - targetdir - full path
	local FILE="${1##*/}"
	pushd "${2}"
	if [ "${META}" != "no" ] ; then
		local TARGET="${FILE/.djvu/.meta}"
		if [ -f "${TARGET}" ] ; then
			if [ "${FORCE}" == "yes" ] ; then
				${DJVUSED} "${1}" -e "print-meta" > "${TARGET}"
			elif [ "${FORCE}" == "skip" ] ; then
				log 1 "Soubor ${TARGET} již v adresáři ${2} existuje."
			else
				echo "Soubor ${TARGET} již v adresáři ${2} existuje.." >> /dev/stderr
				potvrdit && ${DJVUSED} "${1}" -e "print-meta" > "${TARGET}"
			fi
		else
			${DJVUSED} "${1}" -e "print-meta" > "${TARGET}"
		fi
	fi
	popd
}

function exportmetapage {
	# $1 - DjVu file - full path
	# $2 - identificator - page name
	# $3 - targetdir - full path
	pushd "${3}"
	if [ "${META}" != "no" ] ; then
		local TARGET="${2/.djvu/.meta}"
		if [ -f "${TARGET}" ] ; then
			if [ "${FORCE}" == "yes" ] ; then
				${DJVUSED} "${1}" -e "select '${2}'; print-meta" > "${TARGET}"
			elif [ "${FORCE}" == "skip" ] ; then
				log 1 "Soubor ${TARGET} již v adresáři ${3} existuje."
			else
				echo "Soubor ${TARGET} již v adresáři ${3} existuje.." >> /dev/stderr
				potvrdit && ${DJVUSED} "${1}" -e "select '${2}'; print-meta" > "${TARGET}"
			fi
		else
			${DJVUSED} "${1}" -e "select '${2}'; print-meta" > "${TARGET}"
		fi
	fi
	popd
}

function exportdsedpage {
	# $1 - DjVu file - full path
	# $2 - identificator - page name
	# $3 - targetdir - full path
	pushd "${3}"
	case "${DSED}" in
		yes|all) local EXPORT="output-all"
		;;
		txt) local EXPORT="output-txt"
		;;
		ant) local EXPORT="output-ant"
		;;
		no) return 0
		;;
	esac
	if [ "${DSED}" != "no" ] ; then
		local TARGET="${2/.djvu/.dsed}"
		if [ -f "${TARGET}" ] ; then
			if [ "${FORCE}" == "yes" ] ; then
				${DJVUSED} "${1}" -e "select '${2}'; ${EXPORT}" > "${TARGET}"
			elif [ "${FORCE}" == "skip" ] ; then
				log 1 "Soubor ${TARGET} již v adresáři ${3} existuje."
			else
				echo "Soubor ${TARGET} již v adresáři ${3} existuje.." >> /dev/stderr
				potvrdit && ${DJVUSED} "${1}" -e "select '${2}'; ${EXPORT}" > "${TARGET}"
			fi
		else
			${DJVUSED} "${1}" -e "select '${2}'; ${EXPORT}" > "${TARGET}"
		fi
	fi
	popd
}

function exportdjvupage {
	# $1 - DjVu file - full path
	# $2 - identificator - page name
	# $3 - targetdir - full path
	pushd "${3}"
	if [ "${PAGE}" == "yes" ] ; then
		if [ -f "${2}" ] ; then
			if [ "${FORCE}" == "yes" ] ; then
				${DJVUSED} -e "select '${2}'; save-page-with '${2}'" "${1}"
			elif [ "${FORCE}" == "skip" ] ; then
				log 1 "Soubor ${2} již v adresáři ${3} existuje."
			else
				echo "Soubor ${2} již v adresáři ${3} existuje.." >> /dev/stderr
				potvrdit && ${DJVUSED} -e "select '${2}'; save-page-with '${2}'" "${1}"
			fi
		else
			${DJVUSED} -e "select '${2}'; save-page-with '${2}'" "${1}"
		fi
	fi
	popd
}

function inserttext {
	if [ -f ${1/.djvu/.xml} ] ; then
		${DJVUXMLPARSER} -o ${1} ${1/.djvu/.xml}
	elif [ -f ${1/.djvu/.dsed} ] ; then
		${DJVUSED} ${1} -f ${1/.djvu/.dsed} -s
	fi
}

function insertxmp {
	if [ -f ${1/.djvu/.xmp} ] ; then
		echo "Vkládám xmp informace, pokud jsou.."
	fi
}

function konvertor {
	# $1 - vstup
	# $2 - výstup
	# je-li na vstupu djvu provede pouze operace spojené s vyexportováním XML, DSED a náhledu v png
	# je-li na vstupu něco jiného než png, djvu, dsed, xml, mng, tiff, xcf či pdf  ověří zda-li jde o obrázek
	if [ -f "$1" ] ; then
		if [ "${1##*.}" == "djvu" ] ; then
			FROM="$1"
		else
			# konverze a výsledek bude ve from..
			# SEPARATE - rozdělení na vrstvy  yes (default) | no
			# DPI - 300 (default)
			# ALG
			todjvu "$1" "$2"
			if [ "$?" !=  "0" ]  ; then
				exit 40
			fi
		fi
		if [ -f "$2" ] && [ "${TEST}" != "yes" ]; then
			if [ ${DSED} == "yes" ] ; then
				if [ -f "${2/.djvu/.dsed}" ] ; then
					if [ ${FORCE} != "no" ] ; then
						rm ${2/.djvu/.dsed}
						exportdsed ${2}
					fi
				else
					exportdsed ${2}
				fi
			fi
			if [ ${XML} == "yes" ] ; then
				if [ -f "${2/.djvu/.xml}" ] ; then
					if [ ${FORCE} != "no" ] ; then
						# exportuji textovou vrstvu v xml, pouze pokud neexistuje, nebo je-li uveden parametr -f (--force)
						# XML ve výchozím stavu exportuje jak text tak hyperlinky. Neexportuje všechna metadata!!!
						rm ${2/.djvu/.xml}
						exportxml ${2}
					fi
				else
					exportxml ${2}
				fi
			fi
			if [ ${IMGPAGE} == "yes" ] ; then
				exportimg ${2}
			fi
			if [ ${INSERTTEXT} == "yes" ] && [ ${#OCR} != "3" ] ; then
				inserttext ${2}
			elif [ ! ${OCR} ] ; then
				inserttext ${2}
			fi
		fi
	fi
}

function getocr {
	# $1 - jméno djvu souboru 
	if [ "${OCR}" ] ; then
		[ "${OCRODJVU%%+([0-9])}" == "" ] && exit ${OCRODJVU} || ${OCRODJVU} --in-place -l ${OCR} "$1"
	fi
}

function testfile {
	# Function return type file by MIME
	# $1 - file
	local SOURCE=$(${REALPATH} -m -P "${1}")
	local FILE="${SOURCE##*/}"
	if [ -f "${SOURCE}" ] ; then
		local TYPE=$(${MIME} -dbM "${SOURCE}" | awk '{print $1}')
	else
		log 1 "testfile: File ${1} is NOT valid."
		exit 1
	fi
	echo "${TYPE,,}"
}

function targetdir {
	# Function return path into existing directory
	# $1 - path
	if [ -z "${1}" ] ; then
		log 1 "targetdir: NOT PATH"
		exit 1
	else
		local TARGETDIR=$(${REALPATH} -m -P "${1}")
		if [ -d "${TARGETDIR}" ] ; then
			echo -n "${TARGETDIR}"
		else
			mkdir -p "${TARGETDIR}"
			if [ $? -gt "0" ] ; then
				log 1 "targetdir: Could not create target directory ${TARGETDIR}"
				exit 1
			else
				echo -n "${TARGETDIR}"
			fi
		fi
	fi
}

function identifybundle {
	# Function testing DjVu file if is (0) or not (1) bundle
	# $1 - DjVu file
	# WARNING: Use ${DJVUDUMP} is necessary!
	local SOURCE=$(${REALPATH} -m -P "${1}")
	local FILE="${SOURCE##*/}"
	if [ -z "${SOURCE}" ] ; then
		log 1 "identifybundle: Path ${1} is not valid."
		exit 1
	else
		if [ $(testfile "${SOURCE}") == "djvu" ] ; then
			local TEST=$(${DJVUDUMP} "${SOURCE}" | grep '^\([[:blank:]]*\)DIRM')
			if [ "${TEST}" == "" ] ; then
				log 1 "identifybundle: ${FILE} is DjVu file"
				return 0
			else
				log 1 "identifybundle: ${FILE} is DjVu bundle"
				return 1
			fi
		else
			log 1 "identifybundle: File ${FILE} is NOT DjVu file."
			exit 1
		fi
	fi
}

function identifyname {
	# Function return NAME of DjVu page in DjVu bundle
	# $1 DjVu Bundle
	# $2 Page identificator (order or name)
	local SOURCE=$(${REALPATH} -m -P "${1}")
	local FILE="${SOURCE##*/}"
	local IDENTIFICATOR="${2##+([[:blank:]])}"
	if [ "${IDENTIFICATOR//+([[:digit:]])}" == "" ] ; then
		log 1 "identifyname: Is any page on position ${IDENTIFICATOR} in DjVu file ${FILE}?"
		local SEARCH="\[P${IDENTIFICATOR}\]"
	else
		log 1 "identifyname: Is page with name ${IDENTIFICATOR} in DjVu file ${FILE}?"
		local SEARCH="\{${IDENTIFICATOR}\}"
	fi
	local OUTPUT=$(${DJVUSED} "${SOURCE}" -e dump | grep FORM:DJVU | grep "${SEARCH}" | awk -F'[{}]' '{print $2}')
	if [ -z "${OUTPUT}" ] ; then
		log 1 "identifyname: Page identificator ${IDENTIFICATOR} is NOT VALID for DjVu bundle ${FILE}."
		return 0
	else
		echo -n "${OUTPUT}"
	fi
}

function identifypage {
	# Function return DjVu page actual ORDER in DjVu bundle
	# $1 DjVu Bundle
	# $2 Page identificator (order or name)
	local SOURCE=$(${REALPATH} -m -P "${1}")
	local FILE="${SOURCE##*/}"
	local IDENTIFICATOR="${2##+([[:blank:]])}"
	if [ "${IDENTIFICATOR//+([[:digit:]])}" == "" ] ; then
		log 1 "identifypage: Is any page on position ${IDENTIFICATOR} in DjVu bundle ${FILE}?"
		local SEARCH="\[P${IDENTIFICATOR}\]"
	else
		log 1 "identifypage: Is page with name ${IDENTIFICATOR} in ${FILE} bundle?"
		local SEARCH="\{${IDENTIFICATOR}\}"
	fi
	local OUTPUT=$(${DJVUSED} "${SOURCE}" -e dump | grep FORM:DJVU | grep "${SEARCH}" | awk -F'[{}]' '{print $3}')
	if [ -z "${OUTPUT}" ] ; then
		log 1 "identifypage: Page identificator ${IDENTIFICATOR} is NOT VALID for DjVu bundle ${FILE}."
		return 0
	else
		local ORDER="${OUTPUT//+([\]P\[ ])/}"
		echo -n "${ORDER}"
	fi
}

function lastpage {
	# Function return count of all pages in DjVu bundle
	# $1 DjVu file
	local SOURCE=$(${REALPATH} -m -P "${1}")
	local FILE="${SOURCE##*/}"
	[ "$(testfile ${SOURCE})" == "djvu" ] || exit 1
	log 1 "lastpage: Count of all pages in ${FILE}"
#	local OUTPUT=$(${DJVUSED} "${SOURCE}" -e dump | grep FORM:DJVU | wc -l)
	local OUTPUT=$(${DJVUSED} "${SOURCE}" -e n)
	echo -n "${OUTPUT}"
	
}

function list {
	local SOURCE=$(${REALPATH} -m -P "${1}")
	${DJVUSED} "${SOURCE}" -e dump | grep FORM:DJVU | awk -F'[{}]' '{print $3":"$2}'
}

function insertpage {
	# $1 - soubor se kterým se pracuje
	# $2 - djvu soubor co se má vložit
	# $3 - identifikátor stránky před kterou se má vložit
	log 1 "insertpage: ${@}"
	[ "$(testfile ${1})" == "djvu" ] || exit 1
	case "${#@}" in
		3) # soubor stránka a pozice
			log 1 "insertpage: Mám soubor $1 stránku $2 i cílovou pozici.. $3"
			if [ "$(testfile ${2})" == "djvu" ] ; then
				local P=$(identifypage ${1} ${3})
				log 1 "insertpage: P $P"
				if [ -z  "${P}" ] ; then
					echo "insertpage: Identifikátor $3 je neplatný" >> /dev/stderr
					exit 1
				else
					log 1 "insertpage: Vkládám ${1} ${2} ${P}"
					${DJVM} -i ${1} ${2} ${P}
				fi
			else
				echo "insertpage: Parametr $2 není platný soubor"
				exit 1
			fi
		;;
		2) # soubor a stránka
			if [ "$(testfile ${2})" == "djvu" ] ; then
				log 1 "insertpage: Vkládám ${1} ${2}"
				local BMAX=$(lastpage ${2})
				if [ -z "${BMAX}" ] ; then
					log 1 "insertpage: Soubor ${2} není svazek"
					local AMAX=$(lastpage ${1})
					if [ -z "${AMAX}" ] ; then
						echo "Soubor $1 zatím není DjVU svazek" >> /dev/stderr
						exit 0
					else
						log 1 "insertpage: Soubor $1 je DjVU svazek a má ${AMAX} stran"
						while [ "${AMAX}" -gt "0" ] ; do
							log 1 "Zpracovávám stranu ${AMAX} - ${2##*/}"
							local NAMEPAGE=$(identifypage ${1} ${2##*/})
							if [ -z "${NAMEPAGE}" ] ; then
								log 1 "Stránka ${2##*/} v souboru ${1} ještě není"
							else
								echo "Jedna stránka s názvem ${NAMEPAGE} se již v souboru ${1} nalézá. Při vložení se ke jménu vkládané stránky přidá pořadové číslo. Chcete pokračovat ve vkládání?" >> /dev/stderr
								potvrdit && break || exit 0
							fi
							AMAX=$((AMAX -1 ))
						done
						${DJVM} -i ${1} ${2}
					fi
				else
					local AMAX=$(lastpage ${1})
					if [ -z "${AMAX}" ] ; then
						echo "Soubor ${1} nemá žádné stránky." >> /dev/stderr
#xxxxxxxx vytvoření svazku ze souboru 
# 1, Šoupnout stránku do dočasného adresáře
# 2, A na jejím místě vytvořit stejnojmenný svazek
# 3, Pak šoupnout ty další stránky
						potvrdit || exit 0
					else
						while [ "${BMAX}" -gt "0" ] ; do
							local NAMEPAGE=$(identifyname ${1} ${BMAX})
							if [ ! -z "${NAMEPAGE}" ] ; then
								if [ ! $(identifyname ${2} ${NAMEPAGE}) ] ; then
									echo "Stránka s názvem ${NAMEPAGE}, která je součástí souboru ${2} se již v souboru ${1} nalézá. Chcete pokračovat ve vkládání?" >> /dev/stderr
									potvrdit && break || exit 0
								fi
							fi
							BMAX=$((BMAX -1 ))
						done
							echo "Soubor $2, který se chystáte vložit do souboru $1 je vícestránkový DjVu soubor." >> /dev/stderr
							potvrdit && ${DJVM} -i ${1} ${2}
					fi
				fi
			fi
		;;
	esac
}

function deletepage {
	# $1 - soubor se kterým se pracuje
	# $2 - číslo, nebo název strany co se má odstranit
	local FILE="${1##*/}"
	if $(identifybundle "${1}") ; then
		echo "Soubor ${FILE} je typu single-page"
		return 1
	else
		local PAGE=$(identifypage "${1}" "${2}")
		if [ ! -z "${PAGE}" ] ; then
			${DJVM} -d "${1}" "${PAGE}"
		fi
	fi
}

function rotatepage {
	# $1 - soubor se kterým se pracuje
	# $2 - číslo, nebo název strany která se má rotovat
	# $3 - hodnota rotace
#	echo "$*" >> /dev/stderr
	local INFO="""
Uvedenou hodnotu rotace nelze akceptovat. Rotaci lze nastavit buď 
absolutně, a nebo relativně (pootočit o 90°). AKceptované hodnoty:

      0 - výchozí pozice
      1 - natočení vpravo
      2 - otočení  vzhůru nohama
      3 - natočení vlevo
   left - rotace směrem doleva
  right - rotace směrem doprava).
    180 - přetočení o 180°

Každá jiná hodnota parametru je ignorována."""
	local PARAMS=($2)
	if [ "${#PARAMS[@]}" -gt "1" ] ; then
		case "${PARAMS[$((${#PARAMS[@]} -1))]}" in
			0|1|2|3|180|left|right) # echo "Jak mám otáčet $1" >> /dev/stderr
				local ROTATE="${PARAMS[$((${#PARAMS[@]} -1))]}"
#				echo "rotatepage: před ořezáním -$2-"
				local TEMP="${2% ${ROTATE}}"
				local IDPAGE=${TEMP##+([[:blank:]])}
#				echo "rotatepage: po ořezání -${IDPAGE}-"
			;;
			*) echo "Neplatný parametr rotace - ${2}" >> /dev/stderr
				exit 1
			;;
		esac
	else
#		echo "Rotuji dokument globálně.. ${PARAMS}" >> /dev/stderr
		case "${PARAMS}" in
			0|1|2|3|180|left|right) #  echo "Jak mám otáčet $1" >> /dev/stderr
				local ROTATE="${PARAMS}"
			;;
			*) echo "Neplatný parametr rotace - ${PARAMS}" >> /dev/stderr
				exit 1
			;;
		esac
	fi
#	echo "rotatepage: ${IDPAGE} - ${ROTATE}" >> /dev/stderr

	if $(identifybundle "${1}") ; then
		if [ -z "${IDPAGE}" ] ; then
			case "${ROTATE}" in
				0|1|2|3)  ${DJVUSED} -e "set-rotation ${ROTATE}; save" "${1}"
				;;
				left) ${DJVUSED} -e "set-rotation +1; save" "${1}"
				;;
				right) ${DJVUSED} -e "set-rotation -1; save" "${1}"
				;;
				180) ${DJVUSED} -e "set-rotation +2; save" "${1}"
				;;
				*) echo "${INFO}" >> /dev/stderr
				;;
			esac
		else
			echo "Dokument je typu DjVu single page. Parametr ${IDPAGE} nemá význam, chcete pokračovat v rotaci?" >> /dev/stderr
			if $(potvrdit) ; then
				case "${ROTATE}" in
					0|1|2|3)  ${DJVUSED} -e "set-rotation ${ROTATE}; save" "${1}"
					;;
					left) ${DJVUSED} -e "set-rotation +1; save" "${1}"
					;;
					right) ${DJVUSED} -e "set-rotation -1; save" "${1}"
					;;
					180) ${DJVUSED} -e "set-rotation +2; save" "${1}"
					;;
					*) echo "${INFO}" >> /dev/stderr
					;;
				esac
			else
				exit 0
			fi
		fi
	else
		if [ -z "${IDPAGE}" ] ; then
			echo "Při globálním natočení stránek dokumentu dávejte pozor, zda-li nastavujete absolutní hodnotu natočení, nebo, zda-li otáčíte stránky relativně (left/right). Při točení se upravuje natočení všech stránek. Buďte tedy při této operaci opatrní a raději si předem zkontrolujte, zda-li tím neovlivníte i některou ze stránek. Pokud ano, pak zvolte buť relativní parametr natočení, nebo ji pak otočte do správné pozice dodatečně."
			if $(potvrdit) ; then
				case "${ROTATE}" in
					0|1|2|3)  ${DJVUSED} -e "set-rotation ${ROTATE}; save" "${1}"
					;;
					left) ${DJVUSED} -e "set-rotation +1; save" "${1}"
					;;
					right) ${DJVUSED} -e "set-rotation -1; save" "${1}"
					;;
					180) ${DJVUSED} -e "set-rotation +2; save" "${1}"
					;;
					*) echo "${INFO}" >> /dev/stderr
					;;
				esac
			else
				exit 0
			fi
		else
#			echo "Je třeba provést identifikaci stránky ${IDPAGE}"
			local NAMEPAGE=$(identifyname "${1}" "${IDPAGE}")
			if [ -z "${NAMEPAGE}" ] ; then
				echo "Stránka ${IDPAGE} ve svazku ${1} není" >> /dev/stderr
				exit 1
			else
				log 1 "Otáčím stránku ${NAMEPAGE}"
				case "${ROTATE}" in
					0|1|2|3)  ${DJVUSED} -e "select '${NAMEPAGE}'; set-rotation ${ROTATE}; save" "${1}"
					;;
					left) ${DJVUSED} -e "select '${NAMEPAGE}'; set-rotation +1; save" "${1}"
					;;
					right) ${DJVUSED} -e "select '${NAMEPAGE}'; set-rotation -1; save" "${1}"
					;;
					180) ${DJVUSED} -e "select '${NAMEPAGE}'; set-rotation +2; save" "${1}"
					;;
					*) echo "${INFO}" >> /dev/stderr
					;;
			esac
			fi
		fi
	fi
}

function forwardpage {
	# $1 - soubor
	# $2 - stránka k přesunu
	# $3 - pozice k přesunu
	local BORDER=$(identifypage "${1}" "${3}")
	if [ -z "${BORDER}" ] ; then
#		echo "Pouze se posouvá, pokud nejde o klíčové slovo.."
		case "${3}" in
			end) # Přesun na předposlední pozici
				echo "ToDo" >> /dev/stderr && exit 0
			;;
			begin) # Přesun na začátek souboru
				echo "ToDo" >> /dev/stderr && exit 0
			;;
			*) local AORDER=$(identifypage $1 $2)
				if [ -z "${AORDER}" ] ; then
					echo "Stránka $2 v souboru $1 není" >> /dev/stderr
					exit 1
				else
					echo "Není jiná pozice, bude se posouvat vpřed" >> /dev/stderr
					if [ "${AORDER}" -gt "1" ] ; then
						local B=$(identifyname ${1} $((${AORDER} - 1)))
						local A=$(identifyname ${1} ${AORDER})
						echo "Strana $A se bude se přesouvat před $B, mohu přikročit k rozebrání a vyjmutí stránky" >> /dev/stderr
						rozvazat ${1} ${TEMPDIR}
						deletepage ${1} ${A}
					else
						echo "Stránka $AORDER se již nachází na první pozici" >> /dev/stderr
						exit 1
					fi
				fi
			;;
		esac
	else
		echo "plná - cílová pozice, či stránka existuje. Je třeba zjistit, zda identifikátor není v kolizi"
		local AORDER=$(identifypage $1 $2)
		if [ -z "${AORDER}" ] ; then
			echo "Stránka s identifikátorem $2 v souboru $1 není" >> /dev/stderr
			exit 1
		else
			echo "Stránka vy se mohla přesouvat také na sebe samu" >> /dev/stderr
			local B=$(identifyname $1 ${BORDER})
			local A=$(identifyname $1 ${AORDER})
			if [ "${B}" == "${A}" ] ; then
				echo "Identifikátor cílové pozice odpovídá aktuální pozici" >> /dev/stderr
				exit 1
			else
				echo "Mohu přikročit k rozebrání a vyjmutí stránky"
				rozvazat ${1} ${TEMPDIR}
				deletepage ${1} ${A}
			fi
		fi
	fi
	local BORDER=$(identifypage $1 $B)
	echo "Vkládám stránku ${A} na pozici $BORDER"
	insertpage ${1} "${TEMPDIR}/${A}" ${BORDER}
}

function backpage {
	# REVIZE NUTNÁ!!!
	# $1 - soubor
	# $2 - stránka k přesunu
	# $3 - pozice k přesunu
	local P=$(identifypage $1 $2)
	AORDER=$P
	A=$(identifyname $1 $AORDER)
	local P=$(identifypage $1 $3)
	BORDER=$P
	if [ -z "${BORDER}" ] ; then
		if [ -z "${AORDER}" ] ; then
			echo "Stránka $2 v souboru není.."
			exit 1
		else
			B=$(identifyname $1 $((${AORDER} + 1)))
		fi
	else
		B=$(identifyname $1 ${BORDER})
	fi
	echo "forwardpage: Přesouvám A -> $A před B -> $B" >>/dev/stderr
	${DJVMCVT} -i ${1} ${TEMPDIR} index.djvu
	deletepage ${1} ${A}
	local P=$(identifypage $1 $B)
	insertpage ${1} "${TEMPDIR}/${A}" $(($P + 1))
}

function djvuinfo {
	# $1 - soubor
	# $2 - parametry
#	echo "djvuinfo: ${#@}" >> /dev/stderr
#	echo "djvuinfo: Soubor ${1}" >> /dev/stderr
#	echo "djvuinfo: Parametry ${2}" >> /dev/stderr
	# Ověřuji, je-li soubor typu svazek..
	if $(identifybundle "${1}") ; then
		local PAGES="none"
	else
		local PAGES=$(lastpage "${1}")
	fi
	if [ -z "${2}" ] ; then
		echo "${PAGES}"
	elif [ "${2}" == "all" ] ; then
		echo "Info pro celý soubor.."
		local INFO="DjVu pages"
		echo -n "${INFO}" && printf "%$((31 - ${#INFO}))s : ${PAGES}\n" >> /dev/stderr
		${EXIFTOOL} "${1}"
	else
		# extrakce stránky do dočasného adresáře..
		local NAMEPAGE=$(identifyname "${1}" "${2}")
		echo "djvuinfo: ${NAMEPAGE}" >> /dev/stderr
		exportpage "${1}" "${NAMEPAGE} ${TEMPDIR}"
		local INFO="DjVu pages"
		echo -n "${INFO}" && printf "%$((31 - ${#INFO}))s : ${PAGES}\n" >> /dev/stderr
		${EXIFTOOL} "${TEMPDIR}/${NAMEPAGE}"
	fi
}

function djvubundle {
	# REVIZE NUTNÁ!!!
	# Funkce pro vytvoření svazku..
	# $1 - vzorek podle kterého se mají vybrat soubory
	# $2 - cílový DjVu soubor
	# $FORCE - ovlivňuje jestli se má přepsat cílový soubor, nebo ne
	# $INDIRECT - ovlivňuje typ svazku
	# $EXTENSION - je přípona výchozích souborů
	echo $@
	if [ -f "$1" ] ; then
		if [ -f "$2" ] ; then 
			if [ ${FORCE} == "no" ] ; then
				echo "použiju djvmcvt"
				help existed "$2"
				exit 0
			else
				${DJVMCVT} -${INDIRECT} "$1" "$2"
			fi
		fi
	else
		if [ -f "$2" ] ; then 
			if [ ${FORCE} == "no" ] ; then
				help existed "$2"
				exit 0
			else
				rm -rf "$2"
			fi
		fi
		if [ ${RENAME} == "no" ] ; then
			echo "Výchozí soubory jsou identifikovány vzorkem a nepřejmenují se"
			for i in $(ls -1 | grep -E "([0-9])\1?$EXTENSION\$" | sed "s/$1//" | sort -n) ; do
				#echo "$2 $1$i"
				ORIGSOUBOR="$1$i"
				DJVUSOUBOR=${ORIGSOUBOR/$EXTENSION/.djvu}
				if [ -f "$ORIGSOUBOR" ] ; then
					if [ ! -f "$DJVUSOUBOR" ] ; then
						todjvu "$ORIGSOUBOR"
					fi
				fi
				if [ -f "$2" ] ; then
					${DJVM} -i "$2" "$DJVUSOUBOR"
				else
					${DJVM} -c "$2" "$DJVUSOUBOR"
				fi
			done 
		else
#		RENAME
			if [ "${RENAME}" == "0" ] ; then
				#echo "numerické číslování, název souborů se - až na číslo zachová "
				INPUT=""
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						NUMBER="${RAWNUMBER##+(0)}"
						if [ "${NUMBER}" == "" ] ; then
							TARGET="${INPUT}0${EXTENSION}"
						else
							TARGET="${INPUT}${NUMBER}${EXTENSION}"
						fi
						if [ "$3" ] ; then
							if [ "$TARGET" == "${VZOR}$3${EXTENSION}" ] ; then
								konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
							fi
						else
							konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
						fi
					done
#					echo "NUMERIC - soubor stejný"
			elif [ ! "${RENAME//0/}" ] ; then
				MAX="0"
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						if [ "${#RAWNUMBER}" -gt  "${#MAX}" ] ; then
							MAX="${RAWNUMBER}"
						fi
					done
				if [ "${#MAX}" -gt "${#RENAME}" ] ; then
					BASE="${MAX//[0-9]/0}"
				else
					BASE="${RENAME}"
				fi
				INPUT=""
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						NUMBER="${RAWNUMBER##+(0)}"
						if [ "${NUMBER}" == "" ] ; then
							TARGET="${INPUT}${BASE}${EXTENSION}"
						else
							TARGET="${INPUT}${BASE:0:$((${#BASE} - ${#NUMBER}))}${NUMBER}${EXTENSION}"
						fi
						if [ "$3" ] ; then
							if [ "$TARGET" == "${VZOR}$3${EXTENSION}" ] ; then
								konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
							fi
						else
							konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
						fi
					done
#				echo "BASE - soubor stejný"
			else
				# VZOR + BASE z RENAME
				VZOR="${RENAME%%+(0)}"
				BASE="${RENAME#$VZOR}"
				if [ "${#BASE}" == "1" ] ; then
					INPUT=""
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						NUMBER="${RAWNUMBER##+(0)}"
						if [ "${NUMBER}" == "" ] ; then
							TARGET="${VZOR}0${EXTENSION}"
						else
							TARGET="${VZOR}${NUMBER}${EXTENSION}"
						fi
						if [ "$3" ] ; then
							if [ "$TARGET" == "${VZOR}$3${EXTENSION}" ] ; then
								konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
							fi
						else
							konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
						fi
					done
#					echo "NUMERIC - vzor"
				else
					INPUT=""
					MAX="0"
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							echo "Soubor $i nevyhovuje zvolenému vzoru $1 přeskakuji jej" >> /dev/stderr
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						if [ "${#RAWNUMBER}" -gt  "${#MAX}" ] ; then
							MAX="${RAWNUMBER}"
						fi
					done
					ORIGBASE="${MAX//[0-9]/0}"
					if [ "${#ORIGBASE}" -gt "${#BASE}" ] ; then
						BASE="$ORIGBASE"
						echo "ORIGBASE - vzor"
					fi
					#	Seznam setříděný podle délky řetězců $(ls -1 $1* | grep -E "([0-9])\1?$EXTENSION\$" | sed "s/$1//" | sort -n)
					# for i in $(ls -1 | grep -E "([0-9])\1?$EXTENSION\$" | awk '{ print length, $0 }' | sort -n ) ; do
					INPUT=""
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						NUMBER="${RAWNUMBER##+(0)}"
						if [ "${NUMBER}" == "" ] ; then
							TARGET="${VZOR}${BASE}${EXTENSION}"
						else
							TARGET="${VZOR}${BASE:0:$((${#BASE} - ${#NUMBER}))}${NUMBER}${EXTENSION}"
						fi
						if [ "$3" ] ; then
							if [ "$TARGET" == "${VZOR}$3${EXTENSION}" ] ; then
								konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
							fi
						else
							konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
						fi
					done
#					echo "VZOR BASE"
				fi
			fi
		fi
	fi
}

function fromxcf {
	if [ "${1##*.}" == "xcf" ] ; then
		TEMPORARY="/tmp/$WINDOWID$BASHPID"
		mkdir $TEMPORARY
		convert ${1} ${TEMPORARY}/test.png
		pushd $TEMPORARY
			BUNDLE=" "
			for i in $(ls -cr -1) ; do
				todjvu $i
				BUNDLE="$BUNDLE ${i/.png/.djvu}"
			done
			djvm -c out.djvu $BUNDLE
		popd
		mv $TEMPORARY/out.djvu ./
		rm -rf $TEMPORARY
	fi
}

function help {
	echo -n """[1mNápověda pro [1m[2m${0##*/}[0m : """
	case "$1" in
		page) echo """volba [1m-p[0m ([1m--page[0m)

  Extrakce DjVu stránky ze svazku při akci [2mexport[22m

  [1m${0##*/}[0m ... {-p|--page} [yes|no] ...
  
[4mPoznámka:[24m
  * Pokud za volbou není uveden žádný další parametr, tak se automaticky
    předpokládá - yes.
  * Výchozí parametr - no - lze implicitně změnit nastavením proměnné
    PAGE do souboru v adresáři ${HOME}/.config/${NAME}/
  * Exportované stránky se ukládají pod svým původním názvem.
"""
		;;
		image) echo """volba [1m-i[0m ([1m--img[0m)

  [4mExtrakce obrazové vrstvy[24m DjVu stránky do bitmapového souboru

  [1m${0##*/}[0m ... {-i|--img} [yes|no|<layer>] ...

  Je-li parametrem volby [3myes[23m, tak se bude při akci [2mexport[22m generovat z DjVu
  stránky plnobarevný bitmapový obrázek ve formátu PNG.
  V ostatních případech bude ve formátu PNM.

      [1m${0##*/}[0m --img background svazek.djvu export stranka.djvu
 
Použitelné parametry:
                 color - plnobarevná stránka
                 black - černobílá kresba
            foreground - vrstva popředí
            background - vrstva pozadí
                  mask - maska
  Je-li místo [3m'yes'[23m uvedeno [3m'background'[23m, bude při exportu stránky
  strana.djvu uložen obrázek pozadí pod jménem strana.background.pnm
  Výchozí nastavení lze implicitně změnit nastavením proměnné IMGPAGE
"""
		;;
		dsed) echo """volba [1m-d[0m ([1m--dsed[0m)

  Extrakce skryté textové vrstvy DjVu stránky ve formátu pro djvused.
  Parametrem lze zvolit, co se má při akci [2mexport[22m uložit.

  [1m${0##*/}[0m ... {-d|--dsed} [yes|no|all|txt|ant] ...
  
         yes - stejný efekt jako volba all
         no  - textová vrstva se neexportuje (default)
         all - exportuje se celý obsah skryté textové vrstvy
         txt - exportuje se pouze obsah stránky
         ant - exportují se meta atributy stránky, hyperlinky, atp.

[4mPoznámka:[24m
  * Pokud za volbou není uveden žádný další parametr, tak se automaticky
    předpokládá - yes.
  * Výchozí parametr - no - lze implicitně změnit nastavením proměnné
    DSED do souboru v adresáři ${HOME}/.config/${NAME}/
  * Exportovaná data se ukládají do souborů s příponou [3m.dsed[23m.
"""
		;;
		force) echo """volba [1m-f[0m ([1m--force[0m)

  Nastavením této volby si lze vynutit výchozí chování k souborům při
  akci [2mexport[22m. Není-li uvedena, tak se skript před každým
  přepsáním již existujícího souboru zeptá, zda-li má, nebo nemá
  pokračovat.

  [1m${0##*/}[0m ... {-f|--force} [yes|no|skip] ...
  
         yes  - všechny soubory se budou bez keců přepisovat.
         no   - skript se před přepsáním souboru bude dotazovat, zda-li
                má soubor přepsat.
         skip - pokud bude cílový soubor existovat, tak se akce přeskočí.

[4mPoznámka:[24m
  * Pokud za volbou není uveden žádný další parametr, tak se automaticky
    předpokládá - skip.
  * Výchozí parametr hodnotu parametru  (skip) - lze implicitně změnit
    nastavením proměnné FORCE v uživatelském konfiguračním souboru.
"""
		;;
		verbose) echo """volba [1m-v[0m ([1m--verbose[0m)

  Prostřednictvím této volby si lze přesměrovat výstup doplňujících
  informačních výpisů na konzoli. Díky nim pak lze podrobně sledovat
  postup skriptu při zpracování souboru

  [1m${0##*/}[0m ... {-v|--verbose} ...
"""
		;;
		xml) echo """volba [1m-x[0m ([1m--xml[0m)

  Extrakce skryté textové vrstvy DjVu stránky ve formátu XML.
  Parametrem lze zvolit, co se má při akci [2mexport[22m uložit.

  [1m${0##*/}[0m ... {-d|--dsed} [yes|no|all|txt|ant] ...
  
         yes - stejný efekt jako volba all
         no  - textová vrstva se neexportuje (default)
         all - exportuje se celý obsah skryté textové vrstvy
         txt - exportuje se pouze obsah stránky
         ant - exportují se meta atributy stránky

[4mPoznámka:[24m
  * Pokud za volbou není uveden žádný další parametr, tak se automaticky
    předpokládá - yes.
  * Výchozí parametr - no - lze implicitně změnit nastavením proměnné
    XML do souboru v adresáři ${HOME}/.config/${NAME}/
  * Exportovaná data se ukládají do souborů s příponou [3m.xml[23m.

[1mPozor:[0m  Při exportu do XML nelze podchytit všechny meta atributy!!!
"""
		;;
		exporttometa) echo """volba [1m-m[0m ([1m--meta[0m)

  Extrakce DjVu stránky ze svazku

  [1m${0##*/}[0m ... {-x|--xml} [yes|no] ...
  
  Prostřednictvím této volby lze zvolit zda se má, nebo nemá při akci
  [3mexport[23m z DjVu svazku exportovat i celá DjVu stránka. Pokud za volbou
  nenásleduje parametr, pak se automaticky předpokládá že ano (yes).
  Výchozí nastavení (no), lze implicitně změnit prostřednictvím
  uživatelského konfiguračního souboru umístěného v v adresáři:

    ${HOME}/.config/${NAME}/
"""
		;;
		exporttothumb) echo """volba [1m-t[0m ([1m--thumb[0m)

  Extrakce DjVu stránky ze svazku

  [1m${0##*/}[0m ... {-t|--thumb} [yes|no] ...
  
  Prostřednictvím této volby lze zvolit zda se má, nebo nemá při akci
  [3mexport[23m z DjVu svazku exportovat i celá DjVu stránka. Pokud za volbou
  nenásleduje parametr, pak se automaticky předpokládá že ano (yes).
  Výchozí nastavení (no), lze implicitně změnit prostřednictvím
  uživatelského konfiguračního souboru umístěného v v adresáři:

    ${HOME}/.config/${NAME}/
"""
		;;
		indirect) echo"""
[1mVolba[0m
         --indirect Volba, kterou lze změnit výchozí typ vícestránkového 
                    DjVu svazku (bundeled)

  Volbu je třeba aplikovat pokud chcete rozbalit stvávající DjVu svazek 
  do podoby volného svazku, nebo pokud chcete při konverzi bitmapových
  souborů rovnou sestavit DjVu svazek jako volný

  Výhodou volného svazku je, že lze dodatečně upravovat jednotlivé stránky
  jako samostatné DjVu soubory, aniž by je bylo nutné exportovat.

  Pro finalizaci DjVu svazku je pak lepší svazek překonvertovat na typ
  bundled, kdy je vše zabaleno v jednom souboru
"""
		;;
		existed) echo """
  Soubor $2 existuje. Pokud se má přepsat, musí být
  uveden parametr -f (--force)
"""
		;;
		dpi) echo"""
[1mParametr[0m
         --dpi  <[2mčíslo[22m> Hodnota DPI, která se má použít při zpracování obrázku.
                               při konverzi. Optimální je zjistit hodnotu přímo ze vstupního
                               obrázku. Před nastavením této hodnoty pro finální konverzi. lze vyzkoušet
                               optimální nastavení na některém ze souborů s využitím parametru
                               --test

  Rozsah číselné hodnoty je od 72 do 6000 dpi. Výchozí hodnota 300 se použije 
  v případě, že parametr --dpi není vůbec uveden.
  Vliv dpi na zpracování obrazu..
"""
		;;
		level) echo """
[1mParametr[0m
         -l|--level  <[2mčíslo[22m> Hodnota akceptovatelných ztrát u černobílé kresby
                               při konverzi. Před nastavením této hodnoty vyzkoušejte
                               optimální nastavení na některém ze souborů a s parametrem
                               --test

  Kromě číselné hodnoty, která musí být menší než 200 lze úroveň ztrát
  nastavit i pomocí některého z následujících parametrů - v případě že 
  jich bude uvedeno víc, má prioritu poslední z nich.

        --lossless     0 - žádné ztráty (default)
        --clean        1 - ignorují se body o velikosti 1 pixelu
        --lossy        100 - ignorují se plochy
"""
		;;
		keywords-export) echo """akce [1mexport[0m

  Export z DjVu svazku. O tom co bude předmětem exportu rozhodují další 
  volby. Export textové vrstvy zajistí volby [3m-x[23m a [3m-d[23m, náhled obrazové vrstvy
  se generuje při volbě [3m-i[23m, a celá stránka v DjVu formátu se exportuje
  při volbě [3m-p[23m.

  [1m${0##*/}[0m [volby] <svazek> export {<num>|<name>|all} [<dir>]

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku
         dir  - adresář do kterého má být výstup uložen

[4mPoznámky:[24m
  * Je-li místo pořadového čísla stránky, nebo jejího názvu, uvedeno [3mall[23m
    tak se bude exportovat vše z celého DjVu svazku.
  * Pro zpracování single-page DjVu stránek je parametr [3mall[23m doporučený
  * Není-li uveden cílový adresář, budou soubory exporované do adresáře,
    kde byl [1m${0##*/}[0m spuštěn.
  * Přepsání již existujících souborů si lze vynutit volbou [3m--force yes[23m
    Výchozí chování je - [3mskip[23m (existující soubory se znovu neexportují)
"""
		;;
		keywords-import) echo """akce [1mimport[0m
  [4mImport obsahu textové vrstvy[24m do DjVu souboru

  [1m${0##*/}[0m [volby] <svazek> import [<file>|<dir>]

         file - soubor s obsahem skryté textové vrstvy
         dir  - adresář se soubory s obsahem skryté textové vrstvy

[3mPoznámky:[23m
  * Parametrem akce [2mimport[22m může být buď adresář se soubory, nebo soubor s
    daty k importu
  * Název souboru musí odpovídat názvu svazku (pro gobální metadata), nebo
    názvu stránky, kterou obsahuje, s tím rozdílem, že jeho přípona odpovídá
    typu dat které obsahuje:
          [3m.meta[23m - meta atributy
           [3m.xml[23m - skrytý text obsahu
          [3m.dsed[23m - poznámky, meta atributy a skrytý text obsahu
       [3m.outline[23m - obsah svazku; Pozor! Obsah je součást celého svazku, nemá
                  tedy smysl ho vkládat do single-page DjVu dokumentu.
    K formátu těchto souborů více viz manuál
  * Není-li uveden žádný adresář, ani soubor, tak se předpokládá že se budou
    zpracovávat soubory z aktuálního adresáře
"""
		;;
		keywords-delete) echo """akce [1mdelete[0m

  [4mOdstranění stránky[24m identifikované jménem, nebo pozicí v DjVu svazku

  [1m${0##*/}[0m [volby] <svazek> delete {<num>|<name>}

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku

[1mDávejte pozor[0m - akce je nevratná !
  Je doporučeno při odstraňování stránek použít jako identifikátor jméno
  stránky. A to z toho důvodu, že se pozice stránky může v průběhu
  zpracování DjVu svazku změnit, kdežto její jméno zůstává vždy v rámci
  svazku jedinečné.
"""
		;;
		keywords-info) echo """akce [1minfo[0m

  [4mVýpis informací o DjVu souboru[24m.

  [1m${0##*/}[0m [volby] <file> info [<num>|<name>]

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku
         file - jméno DjVu souboru
"""
		;;
		keywords-insert) echo """akce [1minsert[0m
  [4mVložení DjVu souboru do Djvu svazku[24m. Je-li na vstupu nekonvertovovaný
  obrázek, dojde ke konverzi. Není-li uvedena pozice, či jméno stránky před 
  kterou se má obsah vložit, připojí se na konec DjVu svazku. Předtím, je ale vyžadováno potvrzení akce, které lze obejít pouze použitím volby -f (--force)

  [1m${0##*/}[0m [volby] <svazek> insert <file> [<num>|<name>]

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku
         file - jméno DjVu souboru, nebo skenu

[3mPoznámka:[23m
  Pokud se již v DjVu souboru stránka se stejným názvem vyskytuje, dojde
  při vložení k přejmenování souboru - za název se přidá podtržítko
  a pořadové číslo výskytu. K takové situaci může dojít také v případě,
  že je operace [2minsert[22m zopakována se stejnými parametry. Pak se
  automaticky přidávané číslo postupně navyšuje.

              insert test01.jpg => test01.djvu
              insert test01.jpg => test01_1.djvu
              insert test01.jpg => test01_2.djvu
              ...
"""
		;;
		keywords-list) echo """akce [1mlist[0m

  [4mSeznam stránek v DjVu souboru[24m.

  [1m${0##*/}[0m [volby] <file> list
"""
		;;
		keywords-forward) echo """akce [1mforward[0m

  Přesun stránky v rámci DjVu svazku o pozici vpřed. [4mPřed stránku, která[24m
  [4mji má následovat[24m. V případě, už přesouvaná stránka je na první pozici,
  se nestane nic.

  [1m${0##*/}[0m [volby] <svazek> fore {<num>|<name>} [<num>|<name>]

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku

  Je doporučeno použít jako identifikátor jména stránek, místo jejich 
  aktuální pozice. A to z toho důvodu, že se pozice stránek mohou v průběhu
  zpracování DjVu svazku měnit, kdežto její jméno stránky je vždy v rámci
  svazku jedinečné.
"""
		;;
		keywords-back) echo """akce [1mback[0m

  Přesun stránky v rámci DjVu svazku o pozici zpět. [4mZa stránku, která[24m
  [4mji má následovat[24m. V případě, už je přesouvaná stránka na poslední pozici,
  se nestane nic.

  [1m${0##*/}[0m [volby] <svazek> back {<num>|<name>} [<num>|<name>]

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku

  Je doporučeno použít jako identifikátor jména stránek, místo jejich 
  aktuální pozice. A to z toho důvodu, že se pozice stránek mohou v průběhu
  zpracování DjVu svazku měnit, kdežto její jméno stránky je vždy v rámci
  svazku jedinečné.
"""
		;;
		keywords-rotate) echo """akce [1mrotate[0m

  Úprava výchozího natočení DjVu stránek.

  [1m${0##*/}[0m [volby] <svazek> rotate {<num>|<name>} <value>

         num   - pořadové číslo stránky
         name  - jméno stránky
         value - parametr jak má být stránka natočena

[1mParametry[0m
  O - nastaví stránku do výchozí pozice
  1 - natočí stránku o 90° vpravo
  2 - natočí stránku vzůru nohama 
  3 - natočí stránku o 90° vlevo
  left - pootočí stránku o 90° směrem doleva
  right - pootočí stránku o 90° směrem doprava
  180 - pootočí stránku o 180°

[3mPoznámka:[23m
          Není-li uveden identifikátor stránky, bude parametrem
          nastaveno globální natočení pro všechny stránky dokumentu.
"""
		;;
		keywords-set) echo """akce [1mset[0m

  [4mNastavení meta atributů[24m DjVu stránky, resp. celého svazku

  [1m${0##*/}[0m [volby] <svazek> set {<num>|<name>} {<file>|<key> <value>}

  [1m${0##*/}[0m [volby] <svazek> set {<file>|<key> <value>}

         num   - pořadové číslo stránky
         name  - jméno stránky
         file  - soubor s meta atributy
         key   - jméno meta atributu
         value - hodnota meta atributu

Nejběžnější atributy (key):
       Title - Název DjVu dikumentu
     Creator - Jméno tvůrce DjVu dokumentu
CreationDate - Čas vytvoření dokumentu
    Keywords - Klíčová slova pro indexaci DjVu dokumentu
      annote - Poznámka k dokumentu

[3mPoznámka:[23m
  Další viz akce [2mprint[22m, [2mexport[22m, [2mimport[22m, [2munset[22m a manuál k tomuto skriptu.
"""
		;;
		keywords-unset) echo """akce [1munset[0m

  [4mOdstranění meta atributů[24m DjVu stránky, resp. celého svazku

  [1m${0##*/}[0m [volby] <svazek> unset {<num>|<name>} <key>

  [1m${0##*/}[0m [volby] <svazek> unset <key>

         num   - pořadové číslo stránky
         name  - jméno stránky
         key   - jméno meta atributu

[1mDávejte pozor[0m - akce je nevratná !
  Akce dovoluje odstranit nejenom vybraný atribut, ale také všechny další,
  proto ji využívejte nanejvýš opatrně. S meta atributy pracujte raději
  prostřednictvím souborů zpracovávaných při akcích [2mexport[22m a [2mimport[22m.
  Pro ověření klíče, před jeho zrušením využijte akci [2mprint[22m. Nový obsah
  klíče lze nastavit přes akci [2mset[22m.
"""
		;;
		keywords-print) echo """akce [1mprint[0m

  [4mVýpis klíčů a jejich obsahu[24m z metainformací uložených v Djvu svazku.

  [1m${0##*/}[0m <svazek> print [all]
  [1m${0##*/}[0m <svazek> print <attr>
  [1m${0##*/}[0m <svazek> print {<num>|<name>} [all]
  [1m${0##*/}[0m <svazek> print {<num>|<name>} <attr>

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku
         attr - jméno atributu
         all  - klíčové slovo (vypsat vše)

[3mPoznámka:[23m
  Jednotlivé atributy lze nastavovat přes [2mset[22m, více atributů najednou
  lze do DjVu stránky či svazku importovat z externího souboru při
  akci [2mimport[22m. Metadata lze z DjVu souborů také exportovat ([2mexport[22m).
"""
		;;
		keywords) echo """
  [1m${0##*/}[0m [volby] {DjVu svazek} <keyword> [-h|...]

  [1m      keyword - popis akce[0m

         delete - odstraní stránku ze svazku
         insert - vloží novou stránku do svazku
     fore, back - přesune stránku v rámci svazku
         rotate - mění orientaci vybrané stránky
            set - nastavuje metainformace DjVu stránek a svazku
          print - vypisuje metainformace z DjVu stránek a svazku
          unset - odstraňuje metainformace DjVu stránek i svazku
         export - exportuje djvu stránku, dsed nebo xml soubor s obsahem
                  textové vrstvy, náhled stránky v png, atp.
         import - importuje do DjVu stránky či svazku obsah skryté textové
                  vrstvy z xml stránky
         rename - přejmenování stránek v DjVu souboru dle nastaveného vzoru

[3mPoznámka:[23m
          Pro podrobnější nápovědu použijte volbu -h za klíčovým slovem
"""
		;;
		rename) echo """
[1mParametr[0m
         -r|--rename  <[2mvzor[22m>  Vzor, podle jakého se mají přejmenovat
                              dílčí DjVu soubory, ze kterých se pak bude
                              sestavovat DjVu svazek.
[4mPopis:[24m
  Pomocí [2mvzoru[22m lze upravit názvy zkonvertovaných DjVu souborů
  před jejich sestavením do DjVu svazku. [2mVzor[22m může být tvořen:
    1, Pouze jednou, nebo více nulami - 000
    2, Nebo řetězcem, následovaným nulami - soubor_00

[3mPoznámka:[23m
  Je-li uvedena pouze jedna nula, budou stránky očíslovány [4mnumericky[24m,
  t.j. od čísla 1 dále. Je-li nul více, pak bude číslo interpretováno
  jako [4mřetězec[24m. tedy 001 a dále. Pokud by číslování stránek přesáhlo
  nastavený počet čísel, bude upraven dle maximálního čísla.

[3mUkázkové vzory : a výsledný efekt..[23m
   soubor-0000 : soubor-0001.djvu .. soubor-0123.djvu
   soubor_0    : soubor_1.djvu    .. soubor_123.djvu
   soubor000   : soubor0001.djvu  .. soubor1234.djvu
"""
			;;
		suffix) echo """
[1mParametr[0m
         -e|--ext  <[2msuffix[22m>  Přípona souborů, ze kterých se má sestavit 
                                DjVu soubor.
[4mPopis:[24m
  [2mSuffix[22m je nutné uvést pouze v případě, že soubory s názvem odpovídajícím
  vzorku dosud nebyly do DjVu zkonvertovány. Jinak se vždy předpokládá, že
  se bude pracovat s již konvertovanými DjVu soubory.

  Je-li [2msuffix[22m uveden, budou konvertovány soubory vyhovující vzorku.
  Pokud některé z nich již konvertovány byly, tak se se fáze konverze
  přeskočí. Pracuje se pak s již existujícím DjVu souborem.

  Konvertovány jsou pouze soubory, které chybí. Kvalitu konverze lze
  ovlivnit  dalšími parametry. Mají-li být soubory překonvertovány znovu,
  lze si to vynutit parametrem -f (--force) a stávající soubory  přepsat.

  Akceptované sufixy: 
     djvu (default), jpg, gif, png, bmp, pnm, pbm, pgm.
  Vícevrstvé soubory:
     xcf, tiff, pdf 
"""
			;;
		options) echo """
[1mPřehled akceptovaných voleb[0m: 
  -h|--help     Nápověda
  -b|--bundle   Výsledekm zpracování bude kompaktní svazek ( default)
  -d|--dsed     Při akci export ukládat obsah textové vrstvy do souboru .dsed
  -f|--force    Vynucená akce
  -i|--indirect Výsledekm zpracování bude volný svazek
  -m|--meta     Při akci export ukládat meta informace z DjVu stránky či svazku do soubor s příponou .meta
  -p|--page     Vytažení celé stránky z DjVu svazku
  -x|--xml      Při akci export ukládat obsah textové vrstvy do souboru .xml
  -t|--thumb    Vygenerování náhledů v DjVu svazku, resp. při akci export vytažení náhledu do souboru s příponou .thumb (obrazová vrstva, kódvaná v  IW44)

Parametrické volby:
   -n|--name    parametr zajistí, že se soubory přejmenují
   -r|--rename  řetězec, který se má použít k pojmenování souborů místo 
                stávajících názvů souborů při sestavení svazku 
                soubor_0000 - soubor_0001.djvu .. soubor_0123.djvu
                soubor_0 -    soubor_1.djvu ,, soubor_123.djvu
"""
		;;
		*) echo """
   Toto je nástroj pro práci s DjVu soubory a svazky.

      [1m${0##*/}[0m [volby] ... <akce>

 Nápovědu k volbám a jejich parametrům vypíše volba -h
 Přehled všech dostupných voleb vypíšete takto...

      [1m${0##*/}[0m -h -h

 Přehled akcí vypíšete takto...

      [1m${0##*/}[0m [volby] <soubor> -h
"""
		;;
	esac
}

function todjvu {
	# $1 - soubor ke konverzi
	# $2 - cílový DjVu soubor
	echo "todjvu: Konvertuji soubor $1 - do souboru $2" >> /dev/stderr
	echo "$(testfile ${1})" >> /dev/stderr
	if [ $(testfile ${1}) == "djvu" ] ; then
		echo "DjVu soubory nelze znovu konvertovat" >> /dev/stderr
		exit 1
	else
		if [ "${#ALG[@]}" -gt "1" ] ; then
			for i in ${ALG[@]} ; do 
				${DIDJVU} encode -o "${2/.djvu/.$i.djvu}" -d "${DPI-300}" ${LEVEL} -m "$i" "$1"
				getocr ${2/.djvu/.$i.djvu}
			done
		else
			if [ -f "${2}" ] ; then
				if [ "${FORCE}" == "yes" ] ; then
				log 1 "todjvu: Cílový soubor ${2} existuje, bude se přepisovat"
					${DIDJVU} encode -o "${2}" -d "${DPI-300}" ${LEVEL} -m "${ALG}" "${1}"
					getocr ${2}
				else
					echo "Mám přepsat cílový soubor ${2}?"
					potvrdit && ${DIDJVU} encode -o "${2}" -d "${DPI-300}" ${LEVEL} -m "${ALG}" "${1}"
					getocr ${2}
				fi
			else
				if [ ! -d "${2%/*}" ] ; then
					log 1 "todjvu: neexistuje adresář pro cílový soubor, musím ho vytvořit"
					mkdir -p "${2%/*}"
				fi
				log 1 "todjvu: konvertuji soubor ${1} do cílového souboru $2"
				echo "${DIDJVU} encode -o ${2} -d ${DPI-300} ${LEVEL} -m ${ALG} ${1}" >> /dev/stderr
				${DIDJVU} encode -o "${2}" -d "${DPI-300}" ${LEVEL} -m "${ALG}" "${1}"
				getocr ${2}
			fi
		fi
	fi
}

function todotest {
	for i in ${ALG[@]} ; do 
		${DIDJVU} encode -o "${1%.*}-$i.djvu" -d 300 -m "$i" "$1"
	done
}

function todoview {
	for i in ${ALG[@]} ; do 
		(${DJVIEW} ${1%.*}-$i.djvu &)
	done
}

function todjvuclassic {
    RANDOMKEY=$[ 8000 + $[ RANDOM % 1000 ]]
    TEMP_DIR="${TEMPDIR}/$WINDOWID$BASHPID$RANDOMKEY"
    mkdir $TEMP_DIR
    TEMP_IMG="$TEMP_DIR/temp.ppm"
    TEMP_MASK="$TEMP_DIR/mask.pbm"
    DJVU_MASK="$TEMP_DIR/mask.djvu"

    case ${1##*.} in
        tiff|tif) KONVERT="${TIFFTOPNM}";;
        png) KONVERT="${PNGTOPNM}";;
        jpg) KONVERT="${JPEGTOPNM}" ;;
    esac

    $KONVERT $1 | tee $TEMP_IMG | ${PPMTOPGM} | ${PGMTOPBM} -threshold -value 0.${3-5} | ${PNMTOPLAINPNM} > $TEMP_MASK;
    ${CJB2} -lossy -clean $TEMP_MASK $DJVU_MASK;
    ${DJVUMAKE} ${1/.png/.djvu} Sjbz=$DJVU_MASK PPM=$TEMP_IMG;
    getocr ${1/.png/.djvu}
    rm -rf $TEMP_DIR
}

# Zpracování parametrů předaných při startu skriptu
function main {
#	echo "$@" >> /dev/stderr
#	echo "$*" >> /dev/stderr

local VSTUP="$*"
local COUNT=${#VSTUP}
local POS=0
local START=0
while [ $POS -lt $COUNT ]
do local POS=$((POS+1))
	case "${VSTUP:$START:$POS}" in
		-a|--algorithm) # Volba pro akci insert
			local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) help algorithm && exit 0
				;;
			esac
			local NEXT="${TEMP#* }"
			local VALUE="${TEMP%${NEXT}}"
#			echo "$VALUE" >> /dev/stderr
			if [ "${VALUE:0:1}" == "-" ] ; then
				local VSTUP="${TEMP}"
				local POS=0
				local COUNT=${#VSTUP}
				log 1 "Nebyl uveden žádný kompresní algoritmus, aplikuji výchozí - $ALG"
			else
				for i in ${VALUE//,/ } ; do
#					echo "$i" >> /dev/stderr
					local TEST="no"
					for y in ${ALGORITHM[@]} ; do
						[ "$i" == "$y" ] && local TEST="yes"
					done
					[ "${TEST}" == "no" ] && echo "Algoritmus $i nelze použít" >> /dev/stderr && exit 0
				done
				ALG=(${VALUE//,/ })
				local VSTUP="${NEXT}"
				local POS=0
				local COUNT=${#VSTUP}
				log 1 "main: Kompresní algoritmy jsou ověřeny, použiji - ${ALG[@]}"
			fi
		;;
		-d|--dsed) # Volba pro akci export
			local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) help dsed && exit 0
				;;
			esac
			local NEXT="${TEMP#* }"
			local VALUE="${TEMP%${NEXT}}"
			case "${VALUE%%+([[:blank:]])}" in
				yes|no|txt|ant|all) DSED="${VALUE%%+([[:blank:]])}"
				local VSTUP="${NEXT}"
				local POS=0
				local COUNT=${#VSTUP}
				log 1 "main: Aplikuji pro DSED parametr - ${DSED}"
				;;
				*) log 1 "Nebyl uveden žádný parametr, aplikuji pro DSED parametr - yes"
				DSED="yes"
				local VSTUP="${TEMP}"
				local POS=0
				local COUNT=${#VSTUP}
			esac
		;;
		--dpi) # Volba pro akci insert
			local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) help dpi && exit 0
				;;
			esac
			local NEXT="${TEMP#* }"
			local VALUE="${TEMP% ${NEXT}}"
#			echo "${VALUE//+([[:digit:]])}" >> /dev/stderr
			if [ "${VALUE//+([[:digit:]])}" == "" ] ; then
				if [ "${VALUE}" -ge "72" ] && [ "${VALUE}" -le "6000" ] ; then
					DPI="${VALUE%%+([[:blank:]])}"
					local VSTUP="${NEXT}"
					local POS=0
					local COUNT=${#VSTUP}
					log 1 "main: Aplikuji pro DPI parametr - ${DPI}"
				else
					echo "Hodnota u volby --dpi se musí pohybovat v rozmezí od 72 do 6000" >> /dev/stderr
					exit 1
				fi
			else
				echo "Nebyla uvedena hodnota dpi. Pokud chcete volbou --dpi změnit výchozí hodnotu (300), musíte ji uvést jako číselný parametr" >> /dev/stderr
				exit 1
			fi
		;;
		-f|--force) local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) help force && exit 0
				;;
			esac
			local NEXT="${TEMP#* }"
			local VALUE="${TEMP%${NEXT}}"
			case "${VALUE%%+([[:blank:]])}" in
				yes|no|skip) FORCE="${VALUE%%+([[:blank:]])}"
				local VSTUP="${NEXT}"
				local POS=0
				local COUNT=${#VSTUP}
				log 1 "main: Aplikuji pro FORCE parametr - ${FORCE}"
				;;
				*) log 1 "Nebyl uveden žádný parametr, aplikuji pro FORCE parametr - skip"
				FORCE="skip"
				local VSTUP="${TEMP}"
				local POS=0
				local COUNT=${#VSTUP}
			esac
		;;
		--clean|--lossy|--lossless|--level) # Volba pro akci insert
			local PARAM=${VSTUP:0:$POS}
			local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) help force && exit 0
				;;
			esac
			case "${PARAM}" in
				--lossy) LEVEL="--loss-level=100"
					local VSTUP="${TEMP}"
					local POS=0
				;;
				--lossless) LEVEL="--loss-level=0"
					local VSTUP="${TEMP}"
					local POS=0
				;;
				--clean) LEVEL="--loss-level=1"
					local VSTUP="${TEMP}"
					local POS=0
				;;
				--level)
							local NEXT="${TEMP#* }"
						local VALUE="${TEMP%${NEXT}}"
						local XXX=${VALUE%%+([[:blank:]])}
						if [ "${XXX//+([[:digit:]])}" == "" ] ; then
						local VSTUP="${NEXT}"
						local POS=0
						local COUNT=${#VSTUP}
						if [ "${XXX}" -ge "0" ] && [ "${XXX}" -lt "200" ] ; then
							LEVEL="--loss-level=${XXX}"
							log 1 "main: Aplikuji pro LEVEL hodnotu - ${LEVEL}"
						else
							help level && exit 0
						fi
					else
						echo "main: Volba --loss-level musí mít vždy uvedenou číselnou hodnotu v rozmezí 0-199" >> /dev/stderr
						exit 1
					fi
				;;
				*) echo "Sem se nikdy neměl dostat"
				;;
			esac
			log 1 "Úroveň ztrátovosti při kompresi ${LEVEL}"
		;;
		-i|--image) # Volba pro akci export
			local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) help image && exit 0
				;;
			esac
			local NEXT="${TEMP#* }"
			local VALUE="${TEMP%${NEXT}}"
			case "${VALUE%%+([[:blank:]])}" in
				yes|no|color|black|foreground|background|mask) IMG="${VALUE%%+([[:blank:]])}"
				local VSTUP="${NEXT}"
				local POS=0
				local COUNT=${#VSTUP}
				log 1 "main: Aplikuji pro IMG parametr - ${IMG}"
				;;
				*) log 1 "Nebyl uveden žádný parametr, aplikuji pro IMG parametr - yes"
				IMG="yes"
				local VSTUP="${TEMP}"
				local POS=0
				local COUNT=${#VSTUP}
			esac
		;;
		-m|--meta) # Volba pro akci export
			local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) help meta && exit 0
				;;
			esac
			local NEXT="${TEMP#* }"
			local VALUE="${TEMP%${NEXT}}"
			if [ "${VALUE%%+([[:blank:]])}" == "yes" ] || [ "${VALUE%%+([[:blank:]])}" == "no" ] ; then
				META="${VALUE%%+([[:blank:]])}"
				local VSTUP="${NEXT}"
				local POS=0
				local COUNT=${#VSTUP}
				log 1 "main: Aplikuji pro META parametr - ${META}"
			else
				META="yes"
				local VSTUP="${TEMP}"
				local POS=0
				local COUNT=${#VSTUP}
				log 1 "Nebyl uveden žádný parametr, aplikuji pro META parametr - yes"
			fi
		;;
		-o|--ocr) # Volba pro akci insert
			local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) ${TESSERACT} --list-langs 2>&1 | sed -n '1!p'
				exit 0
				;;
			esac
			local NEXT="${TEMP#* }"
			local VALUE="${TEMP% ${NEXT}}"
#			echo "$VALUE" >> /dev/stderr
#			echo $(${TESSERACT} --list-langs 2>&1 | sed '1d;x') >> /dev/stderr
			for i in ${VALUE//+/ } ; do
				local TEST="no"
				for y in $(${TESSERACT} --list-langs 2>&1 | sed -n '1!p') ; do
					[ "$i" == "$y" ] && local TEST="yes"
#					echo "$i - $y" >> /dev/stderr
				done
				[ "${TEST}" == "no" ] && echo "Pro jazyk $i nemá tesseract nainstalovanou jazykovou podporu" >> /dev/stderr && exit 0
			done
			if [ "${TEST}" == "yes" ] ; then
				OCR="${VALUE%%+([[:blank:]])}"
				local VSTUP="${NEXT}"
				local POS=0
				local COUNT=${#VSTUP}
				log 1 "main: Aplikuji pro OCR parametr - ${OCR}"
			else
				OCR="${OCR=ces}"
				local VSTUP="${TEMP}"
				local POS=0
				local COUNT=${#VSTUP}
				echo "Nebyl uveden žádný parametr, pro OCR použiji výchozí jazyk - ${OCR}" >> /dev/stderr
			fi
		;;
		-p|--page) # Volba pro akci export
			local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) help page && exit 0
				;;
			esac
			local NEXT="${TEMP#* }"
			local VALUE="${TEMP%${NEXT}}"
			if [ "${VALUE%%+([[:blank:]])}" == "yes" ] || [ "${VALUE%%+([[:blank:]])}" == "no" ] ; then
				PAGE="${VALUE%%+([[:blank:]])}"
				local VSTUP="${NEXT}"
				local POS=0
				local COUNT=${#VSTUP}
				log 1 "main: Aplikuji pro PAGE parametr - ${PAGE}"
			else
				log 1 "Nebyl uveden žádný parametr, aplikuji pro PAGE parametr - yes"
				PAGE="yes"
				local VSTUP="${TEMP}"
				local POS=0
				local COUNT=${#VSTUP}
			fi
		;;
		-t|--thumb) # Volba pro akci insert
			local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) help thumb && exit 0
				;;
			esac
			local NEXT="${TEMP#* }"
			local VALUE="${TEMP% ${NEXT}}"
#			echo "${VALUE//+([[:digit:]])}" >> /dev/stderr
			if [ "${VALUE//+([[:digit:]])}" == "" ] ; then
				if [ "${VALUE}" -ge "32" ] && [ "${VALUE}" -le "256" ] ; then
					THUMB="${VALUE%%+([[:blank:]])}"
					local VSTUP="${NEXT}"
					local POS=0
					local COUNT=${#VSTUP}
					log 1 "main: Aplikuji pro THUMB parametr - ${DPI}"
				else
					echo "Hodnota u volby --thumb se musí pohybovat v rozmezí od 32 do 256" >> /dev/stderr
					exit 1
				fi
			else
				echo "Nebyla uvedena hodnota velikosti náhledu. Pokud chcete volbou --thumb nastavit výchozí hodnotu, musíte ji uvést jako číselný parametr" >> /dev/stderr
				exit 1
			fi
		;;
		-v|--verbose) # Volba pro ukecaný výstup
			local PARAM=${VSTUP:0:$POS}
			local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) help verbose && exit 0
				;;
			esac
			case "${PARAM}" in
				-v|--verbose) LOG="/dev/stderr"
					local VSTUP="${TEMP}"
					local POS=0
				;;
			esac
			log 1 "Nastavuji ukecaný výstup"
		;;
		-x|--xml) # Volba pro akci export
			local POS=$((POS+1))
			local TEMP=${VSTUP:$POS}
			case "$TEMP" in
				-h*|--help*) help xml && exit 0
				;;
			esac
			local NEXT="${TEMP#* }"
			local VALUE="${TEMP%${NEXT}}"
			case "${VALUE%%+([[:blank:]])}" in
				yes|no|txt|ant|all) XML="${VALUE%%+([[:blank:]])}"
				local VSTUP="${NEXT}"
				local POS=0
				local COUNT=${#VSTUP}
				log 1 "main: Aplikuji pro XML parametr - ${XML}"
				;;
				*) log 1 "Nebyl uveden žádný parametr, aplikuji pro XML parametr - yes"
				XML="yes"
				local VSTUP="${TEMP}"
				local POS=0
				local COUNT=${#VSTUP}
			esac
		;;
		*.[dD][jJ][vV][uU]|*.[gG][iI][fF]|*.[jJ][pP][gG]|*.[mM][nN][gG]|*.[pP][dD][fF]|*.[pP][nN][gG]|*.[pP][nN][mM]|*.[tT][iI][fF][fF]|*.[xX][cC][fF]) 
# tady vzniká problém, pokud akce nemá žádné další parametry...
			local FILE="${VSTUP:0:$POS}"
			local TEMP=${VSTUP#${FILE}}
#			echo "Délka řetězce ${#TEMP} -${TEMP}-" >> /dev/stderr
			local OREZ=${TEMP##+([[:blank:]])}
#			echo "Délka řetězce ${#OREZ} -${OREZ}-" >> /dev/stderr
			local CHARSTRING="${OREZ#* }"
#			echo "CHARSTRING Délka řetězce ${#CHARSTRING} -${CHARSTRING}-" >> /dev/stderr
			if [ "${#CHARSTRING}" -eq "${#OREZ}" ] ; then
				local KEY="${CHARSTRING}"
				local CHARSTRING=""
			else
				local TEMP="${OREZ%${CHARSTRING}}"
				local KEY="${TEMP%%+([[:blank:]])}"
			fi
			log 1 "KEY -${KEY}-"
			log 1 "FILE -${FILE}-"
			log 1 "CHARSTRING -${CHARSTRING}-"
		break
		;;
	esac
done

	case "${CHARSTRING}" in
		*-h|*--help|-h*|--help*) if [ -z "${KEY}" ] ; then
				help
			else
				echo "keywords-${KEY}" >> /dev/stderr
				help "keywords-${KEY}"
			fi
			exit 77
		;;
	esac

	if [ -f "${FILE}" ] ; then
#		log 1 "main: Soubor -${FILE}- existuje.."
#		FILE=${FILE//\ /\\ }
		case $(testfile "${FILE}") in
			djvu)
				#echo "AKCE ${KEY}" >> /dev/stderr
				#echo "Parametry #${CHARSTRING}#" >> /dev/stderr
				case "${KEY}" in
					delete) deletepage "${FILE}" "${CHARSTRING}"
						exit 0
					;;
					insert) # ToDo - zpracovat ${CHARSTRING}
						exit 1
						if [ -f "${3}" ] ; then
							if [ $(testfile ${3}) == "djvu" ] ; then
								log 1 "main - insert: Soubor je typu djvu"
								local INSERTFILE=${3}
							else
								[ "${#ALG[@]}" == "1" ] || exit 32
								local INSERTFILE="$TEMPDIR/${3%.*}.djvu"
								todjvu ${3} ${INSERTFILE}
								if [ $? -gt "0" ] ; then
									echo "main - insert: Soubor ${3} se nepodařilo zkonvertovat do souboru ${INSERTFILE}" >> /dev/stderr
									exit 1
								fi
							fi
							# Určit pozici...
							local P=$(identifypage ${1} ${4})
							log 1 "main - insert: Cílová pozice je $P"
							if [ -z "${P}" ] ; then
								if [ -z "${4}" ] ; then
									echo "Připojení souboru ${INSERTFILE} na konec souboru ${1}" >> /dev/stderr
									insertpage ${1} ${INSERTFILE}
								else
									echo "Identifikátor ${4} je pro soubor ${1} neplatný" >> /dev/stderr
									exit 1
								fi
							else
								log 1 "main - insert: Vkládám ${INSERTFILE} na pozici $P"
								insertpage ${1} ${INSERTFILE} ${P}
							fi
						else
							echo "Akci insert lze použít pouze ke vložení souboru" >> /dev/stderr
							exit 1
						fi
						exit 0
					;;
					set) setmeta "${FILE}" "${CHARSTRING}"
						exit 0
					;;
					print) printmeta ${FILE} "${CHARSTRING}"
						exit 0
					;;
					unset) unsetmeta ${FILE} "${CHARSTRING}"
						exit 0
					;;
					fore)  # ToDo - zpracovat ${CHARSTRING}
						exit 1
						[ -f ${3} ] && echo "pro vložení nové stránky do souboru je určena akce insert" >> /dev/stderr && exit 1
#						echo "akce forvard ${1} - ${3} - ${4}" >> /dev/stderr
						forwardpage ${1} ${3} ${4}
						exit 0
					;;
					back)  # ToDo - zpracovat ${CHARSTRING}
						exit 1
						[ -f ${3} ] && echo "pro vložení nové stránky do souboru je určena akce insert" >> /dev/stderr && exit 1
						backpage ${1} ${3} ${4}
						exit 0
					;;
					rotate) rotatepage "${FILE}" "${CHARSTRING}"
						exit 0
					;;
					export) export "${FILE}" "${CHARSTRING}"
						exit 0
					;;
					import) import "${FILE}" "${CHARSTRING}"
						exit 0
					;;
					info)	echo "procházím"
						djvuinfo "${FILE}" "${CHARSTRING}"
						exit 0
					;;
					list) importoutline "${FILE}" "${CHARSTRING}"
					#list "${FILE}"
						exit 0
					;;
					rename)   # ToDo - zpracovat ${CHARSTRING}
						exit 1
					;;
					*) echo "Jsem tu -${KEY}-" >> /dev/stderr
						help keywords && exit 0
					;;
				esac
			;;
			jpeg|png) echo "Bude se zpracovávat soubor v bitmapovém formátu"
				echo "ToDo"
				exit 1
			;;
			xcf|tiff|mng) echo "Jako druhý parametr je soubor ve vícevrstvém bitmapovém formátu. Zpracování těchto souborů není zatím implementováno" >> /dev/stderr
				exit 1
			;;
			xml|XML) echo "má-li první soubor příponu xml"
				echo "ToDo"
				exit 1
			;;
			unknown) echo "Pokud je soubor ${1} typu DjVU, může jít o tzv. SecureDjVu formát, který má kryptované vrstvy. S takovým souborem nelze s opensource nástroji pracovat." >> /dev/stderr
				exit 1
			;;
			*) echo "${FILE} : $(testfile ${FILE})" >> /dev/stderr
				echo '''Pokud následuje djvu soubor'''
				echo '''Pokud následuje adresář'''
				echo '''to je existující soubor typu bundle a:
				- nenásleduje žádný další existující soubor typu djvu, nebo adresář
				a zároveň existuje $DIRECTORY, pak to znamená že se má rozbalit
				- pokud následuje další soubor, pak to znamená že se má nějakým způsobem s tímto dalším souborem naložit. Je-li to:
				- djvu soubor, má se připojit
				- xml soubor, má se vložit
				- soubor typu dsed má se zpracovat
				- jiný soubor - obrázek, který se má převést a vložit
				'''
				echo "Zpracování souborů jako je $2 zatím není implementováno"
				exit 1
			;;
		esac
	else
		echo "Tady se dostane pokud ${FILE} neexistuje" >> /dev/stderr
	fi
}

main "$*"

exit 0
