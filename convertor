#!/bin/bash
# -*- mode: sh -*-

# convertor - tool for conversion and work DjVu files
#
# Author: Aleš Kapica <kapica@fel.cvut.cz>, 2015
#
# Použití...
# convertor [test] image
#	provede testovací konverzi pro všechny dostupné separační algoritmy didjvu
shopt -s extglob

# Changelog
# - ošetřena situace, kdy není nainstalován ocrodjvu
# - ošetřit situaci, kdy soubor neobsahuje žádný textový obsah a soubor dsed, ani xml neexistuje
# - mezi klíčové operace přidáno delete a insert
# - OCR zpracované do samostatné funkce
# - výchozí algoritmus djvu; testovací konverze pro všechny algoritmy se
#   provede pouze je-li uveden parametr --test-conversion
# - implementována rotace stránky
# - implementovány přesuny stránek (akce fore a back)
# - implementováno generování náhledů do exportu
# - upraveny funkce pro export náhledů a souborů textové vrstvy
# - implementována akce print pro výpis metadat

# ToDo
# přepracovat použití djvudump na djvm -l (je rychlejší..)
# implementovat kontrolu do funkce todjvu, aby nedocházelo k nekontrolovatelnému vkládání již existujících stránek
# - přidat kontrolu do akce insert na duplicitní soubory při vkládání
#   vícestránkových DjVu souborů. to ovšem bude vyžadovat samostatnou
#   funkci...
# - dopsat nápovědu pro akci keywords-unset 
# - dopsat manuál pro akci set, argumenty, xmp, atp.
# - implementovat import
# doplnit nápovědu k rotaci stránky (akce rotate)
# opravit volby --algoritmus a --view
NAME="convertor"
[ -d "${HOME}/.config/${NAME}" ] &&	. ${HOME}/.config/${NAME}/* &>>/dev/null

LOG="${LOG=/dev/stderr}"
XML="${XML=no}"
DSED="${DSED=no}"
INDIRECT="${INDIRECT=no}"
FORCE="${FORCE=no}"
RENAME="no"
EXTENSION=".djvu"
THUMBNAIL="${THUMBNAIL=no}"
INSERTTEXT="${INSERTTEXT=no}"
ALG="${ALG=djvu}"
EXTRACTPAGE="${EXTRACTPAGE=no}"
IMGPAGE="${IMGPAGE=no}"

trap '''CHYBA=$? ;
case $CHYBA in
 20) echo "Není nainstalován balík djvu-tools"
 ;;
 21) echo "ERROR: mimetype - tool for detection type of image"
 ;;
 22) echo "ERROR: readlink - tool for detection absolute path of directory"
 ;;
 23) echo "Není nainstalován balík netpbm-sf"
 ;;
 24) "ERROR: imagemagick - tool for image convert is not installed"
 ;;
 31) echo "Není nainstalován balík ocrodjvu, na djvu soubory nelze aplikovat OCR. Buďto jej doinstalujte, nebo odstraňte z příkazové řádky parametr -o (--ocr)" >> /dev/stderr
 ;;
 32) echo "Pokud má při operaci zpracovat do DjVu bitmapový soubor, je třeba uvést na příkazové řádce parametrem -a jaký se má použít algoritmus. Jaké parametry lze použít se dozvíte pokud místo jména algoritmu napíšete znak ?" >> /dev/stderr
 ;;
 33) NORMDIR=yes
 ;;
esac
[ $NORMDIR ] || rm -rf -- "$TEMPDIR"
exit $CHYBA
''' EXIT

TEMPDIR=$(mktemp -d -p /tmp ${NAME}-XXX) || exit 1

#=== testy závislostí ===
# Dependencies:
#   * feh      ( http://feh.finalrewind.org/ )
#   * exiftool ( http://www.sno.phy.queensu.ca/~phil/exiftool ) in Debian package: libimage-exiftool-perl 
#   * yad      ( http://sourceforge.net/projects/yad-dialog )
REALPATH=$(which realpath)
[ ! ${REALPATH} ] && exit 1
REALPATH="$REALPATH -e "

DIDJVU=$(which didjvu)
[ ! ${DIDJVU} ] && echo 'Není nainstalován balík didjvu, nebude možné aplikovat pokročilé algoritmy pro separaci popředí při konverzi do DjVu' >> /dev/stderr && DIDJVU=false
OCRODJVU=$(which ocrodjvu)
[ ! ${OCRODJVU} ] && OCRODJVU=31
DJVIEW=$(which djview)
[ ! ${DJVIEW} ] && echo 'Není nainstalován balík djview, nebude fungovat testovací zobrazení djvu.souborů' >> /dev/stderr && DJVIEW=false
DDJVU=$(which ddjvu)
[ ! ${DDJVU} ] && exit 20
DJVUTXT=$(which djvutxt)
[ ! ${DJVUTXT} ] && exit 20
DJVUSED=$(which djvused)
[ ! ${DJVUSED} ] && exit 20
DJVUTOXML=$(which djvutoxml)
[ ! ${DJVUTOXML} ] && exit 20
DJVUXMLPARSER=$(which djvuxmlparser)
[ ! ${DJVUXMLPARSER} ] && exit 20
DJVUDUMP=$(which djvudump)
[ ! ${DJVUDUMP} ] && exit 20
DJVMCVT=$(which djvmcvt)
[ ! ${DJVMCVT} ] && exit 20
DJVM=$(which djvm)
[ ! ${DJVM} ] && exit 20
CJB2=$(which cjb2)
[ ! ${CJB2} ] && exit 20
DJVUMAKE=$(which djvumake)
[ ! ${DJVUMAKE} ] && exit 20
#YAD=$(which yad)
#[ ! ${YAD} ] && echo 'Není nainstalován balík yad' && exit 1
MIME=$(which mimetype)
[ ! -x "${MIME}" ] && exit 21
STAT=$(which readlink)
[ ! -x "${STAT}" ] && exit 22
EXIFTOOL=$(which exiftool)
[ ! -x "${EXIFTOOL}" ] && exit 23


NETPBM=0
PNMSCALE=$(which pnmscale)
[ ! -x "${PNMSCALE}" ] && NETPBM=1
if (( $NETPBM == 0 )); then
    VERSION=($(${PNMSCALE} -version 2>&1 | head -1))
    case ${VERSION[$((${#VERSION[@]} - 1))]} in
	10.0*|9*) echo "WARNING: Version Netpbm pnmacele don't support filters. I must use imagemagick convert" >> /dev/stderr
	    NETPBM=1
	    ;;
	*)  NETPBM=0
	    BMPTOPNM=$(which bmptopnm)
	    [ ! -x "${BMPTOPNM}" ] && exit 23
	    JPEGTOPNM=$(which jpegtopnm)
	    [ ! -x "${JPEGTOPNM}" ] && exit 23
	    GIFTOPNM=$(which giftopnm)
	    [ ! -x "${GIFTOPNM}" ] && exit 23
	    PNGTOPNM=$(which pngtopnm)
	    [ ! -x "${PNGTOPNM}" ] && exit 23
	    PNMTOJPEG=$(which pnmtojpeg)
	    [ ! -x "${PNMTOJPEG}" ] && exit 23
	    TIFFTOPNM=$(which tifftopnm)
	    [ ! -x "${TIFFTOPNM}" ] && exit 23
	    PNMTOPNG=$(which pnmtopng)
	    [ ! -x "${PNMTOPNG}" ] && exit 23
	    PNMTOPLAINPNM=$(which pnmtoplainpnm)
	    [ ! -x "${PNMTOPLAINPNM}" ] && exit 23
	    PPMTOPGM=$(which ppmtopgm)
	    [ ! -x "${PPMTOPGM}" ] && exit 23
	    PGMTOPBM=$(which pgmtopbm)
	    [ ! -x "${PGMTOPBM}" ] && exit 23
	    ;;
    esac
fi
if (( $NETPBM == 1 )) ; then
    CONVERT=$(which convert)
    [ ! -x "${CONVERT}" ] && echo exit 24
fi
#=== konec testu závislostí ===
function log {
	# $1 - závažnost hlášky
	# $2 - textový řetězec..
	# $DEBUG úroveň logování
	# $LOG - výstup (default - /dev/null
	case "${1}" in
		1) # Hlášky upřesňující místo ve skriptu
		echo "${@:2}" >> ${LOG}
		;;
		0) # Běžné hlášky
		echo "${1}" >> ${LOG}
		;;
		*)
		;;
	esac
}
function rozvazat {
	# $1 - soubor
	# $2 - adresář
	# $3 - indexový soubor
	echo "rozvazat - $1 - $2 - $3" >> /dev/stderr
	if [ -d "${2}" ] ; then
		if [ -z "${3}" ] ; then
			${DJVMCVT} -i ${1} ${2} index.djvu
		else
			${DJVMCVT} -i ${1} ${2} ${3}
		fi
	fi
}

function testfile {
	# $1 - soubor
	local LOCALFILE="$*"
	if [ -f "$*" ] ; then
		local TYPE=$(${MIME} -dbM "${LOCALFILE}" | awk '{print $1}')
	else
		echo "testfile: Předaný soubor ${LOCALFILE} nemohu najít" >> /dev/stderr
		exit 1
	fi
	echo ${TYPE,,}
}

function escape_path {
	echo "escape_path $*" >> /dev/stderr
	echo "$*" | sed \
  -e 's/\ /\\\ /g'
}

potvrdit () {
    read -r -p "${1:-Opravdu chcete akci provést? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        [aA][nN][oO]|[aA]) 
            true
            ;;
        *)
            false
            ;;
    esac
}

function setmeta {
	# $1 - svazek
	# $2 - identifikátor, klíčové slovo nebo soubor
	# $3 - key
	# $4 - obsah klíče
	if [ -f ${2} ] ; then
		echo "Importuji atributy ze souboru ${2}" >> /dev/stderr
		${DJVUSED} ${1} -e "set-meta ${2}; save"
	else
		identifypage ${1} ${2}
		NAMEPAGE=$(identifyname ${1} $?)
		if [ "${NAMEPAGE}" == "" ] ; then
			echo "Neplatný identifikátor stránky ${2}" >> /dev/stderr
			exit 12
		fi
		if [ "${3}" == "" ] ; then
			if [ -f ${NAMEPAGE/.djvu/.meta} ] ; then
				echo "Nastavuji klíč $3 do stránky $PAGE v souboru $1 s obsahem ${@:4}" >> /dev/stderr
				${DJVUSED} ${1} -e "select ${NAMEPAGE}; set-meta ${NAMEPAGE/.djvu/.meta}; save"
			fi
		else
			${DJVUSED} ${1} -e "select ${NAMEPAGE}; print-meta" > $TEMPDIR/${NAMEPAGE/.djvu/.meta}
			echo "${@:3}" >> $TEMPDIR/${NAMEPAGE/.djvu/.meta}
			${DJVUSED} ${1} -e "select ${NAMEPAGE}; set-meta $TEMPDIR/${NAMEPAGE/.djvu/.meta}; save"
		fi
	fi
}

function printmeta {
	# $1 - svazek
	# $2 - identifikátor, klíčové slovo 'all' nebo atribut
	# $3 - atribut, nebo klíčové slovo 'all' (default)
	# není-li určena stránka ani key vypíše pro celý dokument
	if [ "${2}" = "" ] ; then
		echo "Globální metadata souboru ${1##*/} :" >> /dev/stderr
		METAKEYS=$(${DJVUSED} ${1} -e print-meta)
		IFS_BAK=$IFS
		IFS=$'\n'
		for i in $METAKEYS ; do
			echo -e $(echo $i | sed 's/\\/\\0/g')
		done
		IFS=$IFS_BAK
	else
		identifypage ${1} ${2}
		PAGE=$?
		NAMEPAGE=$(identifyname ${1} ${PAGE})
		if [ "${NAMEPAGE}" == "" ] ; then
			if [ "${2}" == "all" ] ; then
				echo "Globální metadata souboru ${1##*/} :" >> /dev/stderr
			else
				if [ "${2/[0-9]/}" == "" ] ; then
					lastpage ${1}
					LASTPAGE=$?
					if [ ${2} -gt ${LASTPAGE} ] ; then
						echo "Požadovaná stránka je mimo rozsah souboru ${1##*/}, který má ${LASTPAGE} a požadovaná stránka se v něm nevyskytuje" >> /dev/stderr
					else
						echo "Globální metadata souboru ${1##*/} - atribut ${2}:" >> /dev/stderr
					fi
				else
					echo "Stránka ${2} se v souboru ${1##*/} nevyskytuje" >> /dev/stderr
					exit 1
				fi
			fi
			METAKEYS=$(${DJVUSED} ${1} -e "print-meta")
			IFS_BAK=$IFS
			IFS=$'\n'
			for i in $METAKEYS ; do
				if [ "${2}" == "all" ] ; then
					echo -e $(echo $i | sed 's/\\/\\0/g')
				else
					KEY=$(echo $i | grep "^${2}[[:blank:]]" | sed 's/\\/\\0/g')
					if [ "$KEY" == "" ] ; then
						continue
					else
						echo -e $KEY
					fi
				fi
			done
			IFS=$IFS_BAK
		else
			if [ "${3}" == "" ] || [ "${3}" == "all" ] ; then
				echo "Metadata stránky ${NAMEPAGE} ( $PAGE ) ze souboru ${1##*/} :" >> /dev/stderr
			else
				echo "Metadata stránky ${NAMEPAGE} ( $PAGE ) ze souboru ${1##*/} - atribut ${3}:" >> /dev/stderr
			fi
			METAKEYS=$(${DJVUSED} ${1} -e "select ${NAMEPAGE}; print-meta")
			IFS_BAK=$IFS
			IFS=$'\n'
			for i in $METAKEYS ; do
				if [ "${3}" == "" ] || [ "${3}" == "all" ] ; then
					echo -e $(echo $i | sed 's/\\/\\0/g')
				else
					KEY=$(echo $i | grep "^${3}[[:blank:]]" | sed 's/\\/\\0/g')
					if [ "$KEY" == "" ] ; then
						continue
					else
						echo -e $KEY
					fi
				fi
			done
			IFS=$IFS_BAK
		fi
	fi
}

function unsetmeta {
	# $1 - svazek
	# $2 - identifikátor, klíčové slovo nebo soubor
	# $3 - key
	identifypage ${1} ${2}
	NAMEPAGE=$(identifyname ${1} $?)
	if [ "${NAMEPAGE}" == "" ] ; then
		echo "Odstraňuji globální atribut.."
		${DJVUSED} ${1} -e "print-meta" > ${TEMPDIR}/${1/.djvu/.temp}
		grep -v "^$2[[:blank:]]" ${TEMPDIR}/${1/.djvu/.temp} >> $TEMPDIR/${1/.djvu/.meta}
		potvrdit && ${DJVUSED} ${1} -e "set-meta $TEMPDIR/${1/.djvu/.meta}; save"
	elif [ "${3}" == "" ] ; then
		echo "Odstraňuji všechny meta informace ze stránky.."
		potvrdit && ${DJVUSED} ${1} -e "select ${NAMEPAGE}; remove-meta; save"
	elif [ "${2}" == "global" ] ; then
		echo "Odstraňuji všechny globální meta informace.."
		potvrdit && ${DJVUSED} ${1} -e "remove-meta; save"
	else
		echo "Odstraňuji atribut ${3} z meta informací stránky ${NAMEPAGE}"
		echo "$1 - $2 - $3 - $NAMEPAGE"
		${DJVUSED} ${1} -e "select ${NAMEPAGE}; print-meta" > ${TEMPDIR}/${NAMEPAGE/.djvu/.temp}
		grep -v "^$3[[:blank:]]" ${TEMPDIR}/${NAMEPAGE/.djvu/.temp} >> ${TEMPDIR}/${NAMEPAGE/.djvu/.meta}
		potvrdit && ${DJVUSED} ${1} -e "select ${NAMEPAGE}; set-meta $TEMPDIR/${NAMEPAGE/.djvu/.meta}; save"
	fi
	exit 33
}

function exportpage {
	# $1 - svazek
	# $2 - identifikátor
	# $3 - cíl (adresář)
	if [ ${#3} -eq "0" ] ; then
		TARGETDIR=$(${REALPATH} ./)
	elif [ -f "${3}" ] ; then
		TARGET=$(${REALPATH} ${3})
		TARGETDIR=${TARGET%/*}
	elif [ -d "${3}" ] ; then
		TARGETDIR=$(${REALPATH} ${3})
	else
		mkdir -p $3
		if [ $? == "0" ] ; then
			TARGETDIR=$(${REALPATH} ${3})
		else
			echo "Cílový adresář $3 nelze vytvořit"
			exit 1
		fi
	fi
	echo "-$2-" >> /dev/stderr
	case "$2" in
		all) lastpage ${1}
			PAGES=$?
			NUMPAGE=1
			echo $PAGES >> /dev/stderr
			while [ ${PAGES} -gt "0" ] ; do
				identifypage ${1} ${NUMPAGE}
				PAGE=$?
				NAMEPAGE=$(identifyname ${1} $PAGE)
				echo "Zpracovávám stránku ${NAMEPAGE}" >> /dev/stderr
				NUMPAGE=$((NUMPAGE + 1))
				PAGES=$((PAGES - 1))
			done
			if [ ${XML} == "yes" ] ; then
				exportxml ${1} ${TARGETDIR}
			fi
			if [ ${DSED} == "yes" ] ; then
				exportdsed ${1} ${TARGETDIR}
			fi
		;;
		*) identifypage ${1} ${2}
			NAMEPAGE=$(identifyname ${1} $?)
			echo "$NAMEPAGE" >> /dev/stderr
			if [ "${NAMEPAGE}" == "" ] ; then
				echo "Neplatný identifikátor stránky $2. Pokud mají být ze souboru vyexportovány všechny stránky, je třeba uvést klíčové slovo - all" >> /dev/stderr
				exit 13
			else
#				echo "export stránky $EXTRACTPAGE - $NAMEPAGE ${#NAMEPAGE} - DSED $DSED - XML $XML - THUMBNAIL $THUMBNAIL - FORCE $FORCE" >> /dev/stderr
				if [ ${IMGPAGE} != "no" ] ; then
					exportimg ${1} ${NAMEPAGE} ${TARGETDIR}
				fi
				if [ ${EXTRACTPAGE} == "yes" ] ; then
					${DJVMCVT} -i ${1} ${TEMPDIR} index.djvu
					if [ -f "${TARGETDIR}/${NAMEPAGE}" ] ; then
						echo "Stránka, kterou se chystáte exportovat již v cílové pozici existuje. Chcete ji přepsat?"
						potvrdit && mv "${TEMPDIR}/${NAMEPAGE}" "${TARGETDIR}/"
						exit 33
					else
						mv "${TEMPDIR}/${NAMEPAGE}" "${TARGETDIR}/"
					fi
				fi
				if [ ${XML} == "yes" ] ; then
					exportxml ${1} ${2} ${TARGETDIR}
				fi
				if [ ${DSED} == "yes" ] ; then
					exportdsed ${1} ${2} ${TARGETDIR}
				fi
			fi
		;;
	esac
	exit 0
}


function exportdsed {
	# $1 - svazek
	# $2 - identifikátor nebo adresář
	# $3 - adresář
	case "${#@}" in
		3) identifypage ${1} ${2}
			PAGE=$?
			NAMEPAGE=$(identifyname ${1} $PAGE)
			if [ -f "${3}/${NAMEPAGE/.djvu/.dsed}" ] ; then
				[ "${FORCE}" == "yes" ] && ${DJVUSED} ${1} -e "select $PAGE; output-all" > ${3}/${NAMEPAGE/.djvu/.dsed}
			else
				${DJVUSED} ${1} -e "select $PAGE; output-all" > ${3}/${NAMEPAGE/.djvu/.dsed}
			fi
		;;
		2) if [ -d ${2} ] ; then
			# echo "Předaný je adresář, bude do něj exportován celý obsah"
			if [ -f "${2}/${1/.djvu/.dsed}" ] ; then
				[ "${FORCE}" == "yes" ] && ${DJVUSED} ${1} -e output-all > ${2}/${1/.djvu/.dsed}
			else
				${DJVUSED} ${1} -e output-all > ${2}/${1/.djvu/.dsed}
			fi
		else
			identifypage ${1} ${2}
			PAGE=$?
			NAMEPAGE=$(identifyname ${1} $PAGE)
			if [ -f "./${NAMEPAGE/.djvu/.dsed}" ] ; then
				[ "${FORCE}" == "yes" ] && ${DJVUSED} ${1} -e "select $PAGE; output-all" > ./${NAMEPAGE/.djvu/.dsed}
			else
				${DJVUSED} ${1} -e "select $PAGE; output-all" > ./${NAMEPAGE/.djvu/.dsed}
			fi
		fi
		;;
		1) if [ -f "./${1/.djvu/.dsed}" ] ; then
				[ "${FORCE}" == "yes" ] && ${DJVUSED} ${1} -e output-all > ./${1/.djvu/.dsed}
			else
				${DJVUSED} ${1} -e output-all > ./${1/.djvu/.dsed}
			fi
		;;
		*) echo "Z nějakého důvodu nelze provést export dsed souboru" >> /dev/stderr && exit 1
		;;
	esac
}

function exportxml {
	# $1 - svazek
	# $2 - identifikátor nebo adresář
	# $3 - adresář
	case "${#@}" in
		3) identifypage ${1} ${2}
			PAGE=$?
			NAMEPAGE=$(identifyname ${1} $PAGE)
			if [ -f "${3}/${NAMEPAGE/.djvu/.xml}" ] ; then
				[ "${FORCE}" == "yes" ] && ${DJVUTOXML} --page ${PAGE} ${1} ${3}/${NAMEPAGE/.djvu/.xml}
			else
				${DJVUTOXML} --page ${PAGE} ${1} ${3}/${NAMEPAGE/.djvu/.xml}
				exportimg ${1} ${PAGE} ${3}
			fi
		;;
		2) if [ -d ${2} ] ; then
				if [ -f "${2}/${1/.djvu/.xml}" ] ; then
					[ "${FORCE}" == "yes" ] && ${DJVUTOXML} ${1} ${2}/${1/.djvu/.xml}
				else
					${DJVUTOXML} ${1} ${2}/${1/.djvu/.xml}
				fi
				exportimg ${1} ${2}
			else
			identifypage ${1} ${2}
			PAGE=$?
			NAMEPAGE=$(identifyname ${1} $PAGE)
				if [ -f "./${NAMEPAGE/.djvu/.xml}" ] ; then
					[ "${FORCE}" == "yes" ] && ${DJVUTOXML} --page ${PAGE} ${1} ./${NAMEPAGE/.djvu/.xml}
				else
					${DJVUTOXML} --page ${PAGE} ${1} ./${NAMEPAGE/.djvu/.xml}
				fi
				exportimg ${1} ${PAGE} ./
			fi
		;;
		1) if [ -f "./${1/.djvu/.xml}" ] ; then
				[ "${FORCE}" == "yes" ] && ${DJVUTOXML} ${1} ./${1/.djvu/.xml}
			else
				${DJVUTOXML} ${1} ./${1/.djvu/.xml}
			fi
			exportimg ${1} ./
		;;
		*) echo "Z nějakého důvodu nelze provést export xml souboru" >> /dev/stderr && exit 1
		;;
	esac
}

function exportimg {
	# Webeditor náhled akceptuje pouze pokud vyhovuje numerickému tvaru - tedy ne tvar 001!!!
	# Náhled se znovu exportuje pouze za předpokladu, že je současně uvedena volba --force
	# $1 - svazek
	# $2 - identifikátor stránky nebo adresář
	# $3 - adresář
	case "${#@}" in
		3) identifypage ${1} ${2}
			PAGE=$?
			NAMEPAGE=$(identifyname ${1} $PAGE)
			case "${IMGPAGE}" in
				yes)  echo "Exportuji ${NAMEPAGE/.djvu/.png} do ${3}" >> /dev/stderr
				if [ -f "${3}/${NAMEPAGE/.djvu/.png}" ] ; then
						if [ "${FORCE}" == "yes" ] ; then
							${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ${3}/${NAMEPAGE/.djvu/.png}
						else
							echo "Soubor s takovým názvem v cílovém adresáři již existuje."
							potvrdit && ${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ${3}/${NAMEPAGE/.djvu/.png}
						fi
					else
						${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ${3}/${NAMEPAGE/.djvu/.png}
					fi
				;;
				no) echo "Export obrazové vrstvy není povolen" >> /dev/stderr
				;;
				*) echo "Exportuji ${NAMEPAGE/.djvu/.${IMGPAGE}.pnm} do ${3}" >> /dev/stderr
					if [ -f "${3}/${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}" ] ; then
						if [ "${FORCE}" == "yes" ] ; then
							${DDJVU} --format=pnm --page=${PAGE} ${1} > ${3}/${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
						else
							echo "Soubor s takovým názvem v cílovém adresáři již existuje."
							potvrdit && ${DDJVU} --format=pnm --page=${PAGE} ${1} > ${3}/${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
						fi
					else
						${DDJVU} --format=pnm --page=${PAGE} ${1} > ${3}/${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
					fi
				;;
			esac
		;;
		2) if [ -d ${2} ] ; then
			lastpage ${1}
			PAGES=$?
			NUMPAGE=1
			while [ ${PAGES} -gt "0" ] ; do
				identifypage ${1} ${NUMPAGE}
				PAGE=$?
				NAMEPAGE=$(identifyname ${1} $PAGE)
				case "${IMGPAGE}" in
					yes)  echo "Exportuji ${NAMEPAGE/.djvu/.png} do ${2}" >> /dev/stderr
					if [ -f "${2}/${NAMEPAGE/.djvu/.png}" ] ; then
							if [ "${FORCE}" == "yes" ] ; then
								${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ${2}/${NAMEPAGE/.djvu/.png}
							else
								echo "Soubor s takovým názvem v cílovém adresáři již existuje."
								potvrdit && ${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ${2}/${NAMEPAGE/.djvu/.png}
							fi
						else
							${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ${2}/${NAMEPAGE/.djvu/.png}
						fi
					;;
					no) echo "Export obrazové vrstvy není povolen" >> /dev/stderr
					;;
					*) echo "Exportuji ${NAMEPAGE/.djvu/.${IMGPAGE}.pnm} do ${2}" >> /dev/stderr
						if [ -f "${2}/${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}" ] ; then
							if [ "${FORCE}" == "yes" ] ; then
								${DDJVU} --format=pnm --page=${PAGE} ${1} > ${2}/${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
							else
								echo "Soubor s takovým názvem v cílovém adresáři již existuje."
								potvrdit && ${DDJVU} --format=pnm --page=${PAGE} ${1} > ${2}/${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
							fi
						else
							${DDJVU} --format=pnm --page=${PAGE} ${1} > ${2}/${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
						fi
					;;
				esac
				NUMPAGE=$((NUMPAGE + 1))
				PAGES=$((PAGES - 1))
			done
		else
			identifypage ${1} ${2}
			PAGE=$?
			NAMEPAGE=$(identifyname ${1} $PAGE)
			case "${IMGPAGE}" in
				yes)  echo "Exportuji ${NAMEPAGE/.djvu/.png} do ./" >> /dev/stderr
				if [ -f "./${NAMEPAGE/.djvu/.png}" ] ; then
						if [ "${FORCE}" == "yes" ] ; then
							${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ./${NAMEPAGE/.djvu/.png}
						else
							echo "Soubor s takovým názvem v cílovém adresáři již existuje."
							potvrdit && ${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ./${NAMEPAGE/.djvu/.png}
						fi
					else
						${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ./${NAMEPAGE/.djvu/.png}
					fi
				;;
				no) echo "Export obrazové vrstvy není povolen" >> /dev/stderr
				;;
				*) echo "Exportuji ${NAMEPAGE/.djvu/.${IMGPAGE}.pnm} do ./" >> /dev/stderr
					if [ -f "./${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}" ] ; then
						if [ "${FORCE}" == "yes" ] ; then
							${DDJVU} --format=pnm --page=${PAGE} ${1} > ./${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
						else
							echo "Soubor s takovým názvem v cílovém adresáři již existuje."
							potvrdit && ${DDJVU} --format=pnm --page=${PAGE} ${1} > ./${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
						fi
					else
						${DDJVU} --format=pnm --page=${PAGE} ${1} > ./${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
					fi
				;;
			esac
		fi
		;;
		1) lastpage ${1}
			PAGES=$?
			NUMPAGE=1
			while [ ${PAGES} -gt "0" ] ; do
				identifypage ${1} ${NUMPAGE}
				PAGE=$?
				NAMEPAGE=$(identifyname ${1} $PAGE)
				case "${IMGPAGE}" in
					yes)  echo "Exportuji ${NAMEPAGE/.djvu/.png} do ./" >> /dev/stderr
					if [ -f "./${NAMEPAGE/.djvu/.png}" ] ; then
							if [ "${FORCE}" == "yes" ] ; then
								${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ./${NAMEPAGE/.djvu/.png}
							else
								echo "Soubor s takovým názvem v cílovém adresáři již existuje."
								potvrdit && ${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ./${NAMEPAGE/.djvu/.png}
							fi
						else
							${DDJVU} --format=pnm --page=${PAGE} ${1} | ${PNMTOPNG} > ./${NAMEPAGE/.djvu/.png}
						fi
					;;
					no) echo "Export obrazové vrstvy není povolen" >> /dev/stderr
					;;
					*) echo "Exportuji ${NAMEPAGE/.djvu/.${IMGPAGE}.pnm} do ./" >> /dev/stderr
						if [ -f "./${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}" ] ; then
							if [ "${FORCE}" == "yes" ] ; then
								${DDJVU} --format=pnm --page=${PAGE} ${1} > ./${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
							else
								echo "Soubor s takovým názvem v cílovém adresáři již existuje."
								potvrdit && ${DDJVU} --format=pnm --page=${PAGE} ${1} > ./${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
							fi
						else
							${DDJVU} --format=pnm --page=${PAGE} ${1} > ./${NAMEPAGE/.djvu/.${IMGPAGE}.pnm}
						fi
					;;
				esac
				NUMPAGE=$((NUMPAGE + 1))
				PAGES=$((PAGES - 1))
			done
		;;
		*) echo "Z nějakého důvodu nelze provést export náhledových souborů" >> /dev/stderr && exit 1
		;;
	esac
}

function inserttext {
	if [ -f ${1/.djvu/.xml} ] ; then
		${DJVUXMLPARSER} -o ${1} ${1/.djvu/.xml}
	elif [ -f ${1/.djvu/.dsed} ] ; then
		${DJVUSED} ${1} -f ${1/.djvu/.dsed} -s
	fi
}

function insertxmp {
	if [ -f ${1/.djvu/.xmp} ] ; then
		echo "Vkládám xmp informace, pokud jsou.."
	fi
}

function konvertor {
	# $1 - vstup
	# $2 - výstup
	# je-li na vstupu djvu provede pouze operace spojené s vyexportováním XML, DSED a náhledu v png
	# je-li na vstupu něco jiného než png, djvu, dsed, xml, mng, tiff, xcf či pdf  ověří zda-li jde o obrázek
	if [ -f "$1" ] ; then
		if [ "${1##*.}" == "djvu" ] ; then
			FROM="$1"
		else
			# konverze a výsledek bude ve from..
			# SEPARATE - rozdělení na vrstvy  yes (default) | no
			# DPI - 300 (default)
			# ALG
			todjvu "$1" "$2"
			if [ "$?" !=  "0" ]  ; then
				exit 40
			fi
		fi
		if [ -f "$2" ] && [ "${TEST}" != "yes" ]; then
			if [ ${DSED} == "yes" ] ; then
				if [ -f "${2/.djvu/.dsed}" ] ; then
					if [ ${FORCE} != "no" ] ; then
						rm ${2/.djvu/.dsed}
						exportdsed ${2}
					fi
				else
					exportdsed ${2}
				fi
			fi
			if [ ${XML} == "yes" ] ; then
				if [ -f "${2/.djvu/.xml}" ] ; then
					if [ ${FORCE} != "no" ] ; then
						# exportuji textovou vrstvu v xml, pouze pokud neexistuje, nebo je-li uveden parametr -f (--force)
						# XML ve výchozím stavu exportuje jak text tak hyperlinky. Neexportuje všechna metadata!!!
						rm ${2/.djvu/.xml}
						exportxml ${2}
					fi
				else
					exportxml ${2}
				fi
			fi
			if [ ${IMGPAGE} == "yes" ] ; then
				exportimg ${2}
			fi
			if [ ${INSERTTEXT} == "yes" ] && [ ${#OCR} != "3" ] ; then
				inserttext ${2}
			elif [ ! ${OCR} ] ; then
				inserttext ${2}
			fi
		fi
	fi
}

function getocr {
	# $1 - jméno djvu souboru 
	if [ "${OCR}" ] ; then
		[ "${OCRODJVU%%+([0-9])}" == "" ] && exit ${OCRODJVU} || ${OCRODJVU} --in-place -l ${OCR} "$1"
	fi
}

function identifybundle {
	# Funkce testuje vstupní soubor, zda-li je typu DjVu a pak zda-li je 
	# typu svazek (1) nebo samostatná stránka (0)
	# $1 - soubor
#	log 1 "identifybundle: Přijímám vstupní parametr ${1}"
	if [ "${#1}" -gt "0" ] ; then
		if [ $(testfile "${1}") == "djvu" ] ; then
			local TEST=$(${DJVUDUMP} "${1}" | grep '^\([[:blank:]]*\)DIRM')
#			log 1 "identifyfile: Výstupní hodnota z djvm - $TEST"
			if [ "${TEST}" == "" ] ; then
#				log 1 "identifybundle: DjVu soubor ${1}"
				return 0
			else
#				log 1 "identifybundle: DjVu svazek ${1}"
				return 1
			fi
		else
			log 1 "identifybundle: Soubor ${FILE} není DjVu"
			exit 1
		fi
	else
#		log 1 "identifybundle: Nebyl předán žádný parametr"
		exit 1
	fi
}

function identifypage2 {
	# Funkce vracející pořadové číslo DjVu stránky , která je založena na djvm
	# $1 soubor
	# $2 testovaná hodnota
	# NEUMÍ PŘEVZÍT KE ZPRACOVÁNÍ JMÉNA SOUBORŮ S MEZERAMI!!
	if [ "${2}" == "" ] ; then
		return 0
	elif [ "${2%%+([0-9])}" == "" ] ; then
		local PAGE="\[P$2\]"
	else
		local PAGE="\{${2}\}"
	fi
	local OUTPUT=$(${DJVUDUMP} ${1} | grep FORM:DJVU | grep ${PAGE} | awk -F'[{}]' '{print $3}')
	local ORDER=${OUTPUT//+([\]P\[])/}
	echo ${ORDER}
}

function identifypage {
	# Funkce vracející pořadové číslo DjVu stránky, která je založena na djvm
	# $1 soubor
	# $2 testovaná hodnota
	# NEUMÍ OŠETŘIT MULTIPAGE DOKUMENT
	echo "Vstup ${#@} && ${2}" >> /dev/stderr
	local PAGE="${@:2}"
	echo "Vstup ${PAGE//[[:digit:]]/} && ${PAGE}" >> /dev/stderr
	if [ "${PAGE//[[:digit:]]/}" == "" ] ; then
		echo "Číslo ${PAGE}" >> /dev/stderr
		local OUTPUT=($(${DJVM} -l ${1} | grep \#${PAGE}\ ))
		local PAGEORDER=${OUTPUT[@]:2:1}
		echo "Kontrolní výstup ${OUTPUT[@]}"  >> /dev/stderr
		echo ${PAGEORDER#\#}
	else
		echo "Strana ${PAGE}" >> /dev/stderr
		local OUTPUT=($(${DJVM} -l ${1} | grep \ ${PAGE}$))
		local PAGEORDER=${OUTPUT[@]:2:1}
		echo "Kontrolní výstup ${OUTPUT[@]}"  >> /dev/stderr
		echo ${PAGEORDER#\#}
	fi
}

function identifyname {
	# Funkce vrací jméno stránky na základě pořadového čísla stránky
	# $1 soubor
	# $2 číslo stránky
#	echo "identifyname: Určuji jméno ${@} ${#@}" >> /dev/stderr
	if [ "${2%%+([0-9])}" == "" ] ; then
		local PAGE="\[P$2\]"
		#OUTPUT=($(${DJVUDUMP} ${1} | grep FORM:DJVU | grep $PAGE))
#		NAME=(${OUTPUT[@]:2})
#		PAGEORDER=$((${#NAME[@]}-1))
#		VYSTUP=${NAME[@]:0:$PAGEORDER} >> /dev/stderr
#		echo "${VYSTUP//+([\{\}])/}"
#		OUTPUT=$(${DJVUDUMP} ${1} | grep FORM:DJVU | grep $PAGE | tr ' ' '#' | awk -F\{ '{print $2}' | awk -F\} '{print $1}' | tr '#' ' ')
		OUTPUT=$(${DJVUDUMP} ${1} | grep FORM:DJVU | grep $PAGE | awk -F'[{}]' '{print $2}')
		echo ${OUTPUT}
	else
		return 1
	fi
}

function lastpage {
	# Funkce vrací maximální pořadové číslo stránek
	# $1 jméno vícestránkového djvu souboru
#	log 1 "lastpage: Vstupní data ${@}"
	[ "$(testfile ${1})" == "djvu" ] || exit 1
	local OUTPUT=$(${DJVUDUMP} ${1} | grep FORM:DJVU | wc -l)
	echo -n "${OUTPUT}"
}

function insertpage {
	# $1 - soubor se kterým se pracuje
	# $2 - djvu soubor co se má vložit
	# $3 - identifikátor stránky před kterou se má vložit
	log 1 "insertpage: ${@}"
	[ "$(testfile ${1})" == "djvu" ] || exit 1
	case "${#@}" in
		3) # soubor stránka a pozice
			log 1 "insertpage: Mám soubor $1 stránku $2 i cílovou pozici.. $3"
			if [ "$(testfile ${2})" == "djvu" ] ; then
				local P=$(identifypage ${1} ${3})
				log 1 "insertpage: P $P"
				if [ -z  "${P}" ] ; then
					echo "insertpage: Identifikátor $3 je neplatný" >> /dev/stderr
					exit 1
				else
					log 1 "insertpage: Vkládám ${1} ${2} ${P}"
					${DJVM} -i ${1} ${2} ${P}
				fi
			else
				echo "insertpage: Parametr $2 není platný soubor"
				exit 1
			fi
		;;
		2) # soubor a stránka
			if [ "$(testfile ${2})" == "djvu" ] ; then
				log 1 "insertpage: Vkládám ${1} ${2}"
				local BMAX=$(lastpage ${2})
				if [ -z "${BMAX}" ] ; then
					log 1 "insertpage: Soubor ${2} není svazek"
					local AMAX=$(lastpage ${1})
					if [ -z "${AMAX}" ] ; then
						echo "Soubor $1 zatím není DjVU svazek" >> /dev/stderr
						exit 0
					else
						log 1 "insertpage: Soubor $1 je DjVU svazek a má ${AMAX} stran"
						while [ "${AMAX}" -gt "0" ] ; do
							log 1 "Zpracovávám stranu ${AMAX} - ${2##*/}"
							local NAMEPAGE=$(identifypage ${1} ${2##*/})
							if [ -z "${NAMEPAGE}" ] ; then
								log 1 "Stránka ${2##*/} v souboru ${1} ještě není"
							else
								echo "Jedna stránka s názvem ${NAMEPAGE} se již v souboru ${1} nalézá. Při vložení se ke jménu vkládané stránky přidá pořadové číslo. Chcete pokračovat ve vkládání?" >> /dev/stderr
								potvrdit && break || exit 0
							fi
							AMAX=$((AMAX -1 ))
						done
						${DJVM} -i ${1} ${2}
					fi
				else
					local AMAX=$(lastpage ${1})
					if [ -z "${AMAX}" ] ; then
						echo "Soubor ${1} nemá žádné stránky." >> /dev/stderr
#xxxxxxxx vytvoření svazku ze souboru 
# 1, Šoupnout stránku do dočasného adresáře
# 2, A na jejím místě vytvořit stejnojmenný svazek
# 3, Pak šoupnout ty další stránky
						potvrdit || exit 0
					else
						while [ "${BMAX}" -gt "0" ] ; do
							local NAMEPAGE=$(identifyname ${1} ${BMAX})
							if [ ! -z "${NAMEPAGE}" ] ; then
								if [ ! $(identifyname ${2} ${NAMEPAGE}) ] ; then
									echo "Stránka s názvem ${NAMEPAGE}, která je součástí souboru ${2} se již v souboru ${1} nalézá. Chcete pokračovat ve vkládání?" >> /dev/stderr
									potvrdit && break || exit 0
								fi
							fi
							BMAX=$((BMAX -1 ))
						done
							echo "Soubor $2, který se chystáte vložit do souboru $1 je vícestránkový DjVu soubor." >> /dev/stderr
							potvrdit && ${DJVM} -i ${1} ${2}
					fi
				fi
			fi
		;;
	esac
}

function deletepage {
	# $1 - soubor se kterým se pracuje
	# $2 - číslo, nebo název strany co se má odstranit
	local P=$(identifypage ${1} ${2})
	PAGE=$P
#	echo "deletepage: Stránka má aktuálně pořadové číslo $PAGE" >> /dev/stderr
	if [ ! -z "${PAGE}" ] ; then
#		echo "deletepage: Odstraňuji stránku $2 - $PAGE ze souboru ${1}"  >> /dev/stderr
		${DJVM} -d ${1} ${PAGE}
#		echo "deletepage: Odstraněna stránka $2 - $PAGE - $?"  >> /dev/stderr
	else
		echo "Stránka $2 v souboru není. Nezapomeňte, že konvertovanému souboru se mění přípona!!"
		exit 1
	fi
}

function rotatepage {
	# $1 - soubor se kterým se pracuje
	# $2 - číslo, nebo název strany která se má rotovat
	# $3 - hodnota rotace
	INFO="""
Uvedenou hodnotu rotace nelze akceptovat. Rotaci lze nastavit buď 
absolutně, a nebo relativně (pootočit o 90°). AKceptované hodnoty:

      0 - výchozí pozice
      1 - natočení vpravo
      2 - otočení  vzhůru nohama
      3 - natočení vlevo
   left - rotace směrem doleva
  right - rotace směrem doprava).
    180 - přetočení o 180°

Každá jiná hodnota parametru je ignorována."""
	local PAGES=$(djvuinfo "${1}")
	if [ "${PAGES}" == "none" ] ; then
		echo "jednostránkový dokument - bude se otáčet globálně"
	else
		echo "vícestránkový dokument - bude se identifikovat stránka"
	fi

exit 0
	PAGE=$?
	NAMEPAGE=$(identifyname ${1} ${PAGE})
	if [ "${NAMEPAGE}" == "" ] ; then
		if [ "${3}" ] ; then
			echo "Nastavuji natočení strany $PAGE celý dokument $1 - $2" >> /dev/stderr
			case "$3" in
				0|1|2|3)  ${DJVUSED} -e "select $PAGE; set-rotation $3; save" $1
				;;
				left) ${DJVUSED} -e "select $PAGE; set-rotation +1; save" $1
				;;
				right) ${DJVUSED} -e "select $PAGE; set-rotation -1; save" $1
				;;
				180) ${DJVUSED} -e "select $PAGE; set-rotation +2; save" $1
				;;
				*) echo "${INFO}" >> /dev/stderr
				;;
			esac
		else
			echo "Nastavuji globální natočení pro celý dokument $1 - $2" >> /dev/stderr
			case "$2" in
				0|1|2|3)  ${DJVUSED} -e "set-rotation $2; save" $1
				;;
				left) ${DJVUSED} -e "set-rotation +1; save" $1
				;;
				right) ${DJVUSED} -e "set-rotation -1; save" $1
				;;
				180) ${DJVUSED} -e "set-rotation +2; save" $1
				;;
				*) echo "${INFO}" >> /dev/stderr
				;;
			esac
		fi
	else
		echo "Nastavuji globální natočení pro celý dokument $1 - $2" >> /dev/stderr
		case "$2" in
			0|1|2|3)  ${DJVUSED} -e "set-rotation $2; save" $1
			;;
			left) ${DJVUSED} -e "set-rotation +1; save" $1
			;;
			right) ${DJVUSED} -e "set-rotation -1; save" $1
			;;
			180) ${DJVUSED} -e "set-rotation +2; save" $1
			;;
			*) echo "${INFO}" >> /dev/stderr
			;;
		esac
	fi
}

function forwardpage {
	# $1 - soubor
	# $2 - stránka k přesunu
	# $3 - pozice k přesunu
	local BORDER=$(identifypage $1 $3)
	if [ -z "${BORDER}" ] ; then
#		echo "Pouze se posouvá, pokud nejde o klíčové slovo.."
		case "${3}" in
			end) # Přesun na předposlední pozici
				echo "ToDo" >> /dev/stderr && exit 0
			;;
			begin) # Přesun na začátek souboru
				echo "ToDo" >> /dev/stderr && exit 0
			;;
			*) local AORDER=$(identifypage $1 $2)
				if [ -z "${AORDER}" ] ; then
					echo "Stránka $2 v souboru $1 není" >> /dev/stderr
					exit 1
				else
					echo "Není jiná pozice, bude se posouvat vpřed" >> /dev/stderr
					if [ "${AORDER}" -gt "1" ] ; then
						local B=$(identifyname ${1} $((${AORDER} - 1)))
						local A=$(identifyname ${1} ${AORDER})
						echo "Strana $A se bude se přesouvat před $B, mohu přikročit k rozebrání a vyjmutí stránky" >> /dev/stderr
						rozvazat ${1} ${TEMPDIR}
						deletepage ${1} ${A}
					else
						echo "Stránka $AORDER se již nachází na první pozici" >> /dev/stderr
						exit 1
					fi
				fi
			;;
		esac
	else
		echo "plná - cílová pozice, či stránka existuje. Je třeba zjistit, zda identifikátor není v kolizi"
		local AORDER=$(identifypage $1 $2)
		if [ -z "${AORDER}" ] ; then
			echo "Stránka s identifikátorem $2 v souboru $1 není" >> /dev/stderr
			exit 1
		else
			echo "Stránka vy se mohla přesouvat také na sebe samu" >> /dev/stderr
			local B=$(identifyname $1 ${BORDER})
			local A=$(identifyname $1 ${AORDER})
			if [ "${B}" == "${A}" ] ; then
				echo "Identifikátor cílové pozice odpovídá aktuální pozici" >> /dev/stderr
				exit 1
			else
				echo "Mohu přikročit k rozebrání a vyjmutí stránky"
				rozvazat ${1} ${TEMPDIR}
				deletepage ${1} ${A}
			fi
		fi
	fi
	local BORDER=$(identifypage $1 $B)
	echo "Vkládám stránku ${A} na pozici $BORDER"
	insertpage ${1} "${TEMPDIR}/${A}" ${BORDER}
}

function backpage {
	# $1 - soubor
	# $2 - stránka k přesunu
	# $3 - pozice k přesunu
	local P=$(identifypage $1 $2)
	AORDER=$P
	A=$(identifyname $1 $AORDER)
	local P=$(identifypage $1 $3)
	BORDER=$P
	if [ -z "${BORDER}" ] ; then
		if [ -z "${AORDER}" ] ; then
			echo "Stránka $2 v souboru není.."
			exit 1
		else
			B=$(identifyname $1 $((${AORDER} + 1)))
		fi
	else
		B=$(identifyname $1 ${BORDER})
	fi
	echo "forwardpage: Přesouvám A -> $A před B -> $B" >>/dev/stderr
	${DJVMCVT} -i ${1} ${TEMPDIR} index.djvu
	deletepage ${1} ${A}
	local P=$(identifypage $1 $B)
	insertpage ${1} "${TEMPDIR}/${A}" $(($P + 1))
}

function djvuinfo {
	# $1 - soubor
	# $2 - parametry
#	echo "djvuinfo: ${#@}" >> /dev/stderr
#	echo "djvuinfo: Soubor ${1}" >> /dev/stderr
#	echo "djvuinfo: Parametry ${2}" >> /dev/stderr
	# Ověřuji, je-li soubor typu svazek..
	if $(identifybundle "${1}") ; then
		local PAGES="none"
	else
		local PAGES=$(lastpage "${1}")
	fi
	if [ -z "${2}" ] ; then
		echo "${PAGES}"
	else
		local INFO="DjVu pages"
		echo -n "${INFO}" && printf "%$((31 - ${#INFO}))s : ${PAGES}\n" >> /dev/stderr
		${EXIFTOOL} "${1}"
	fi
}

function djvubundle {
	# Funkce pro vytvoření svazku..
	# $1 - vzorek podle kterého se mají vybrat soubory
	# $2 - cílový DjVu soubor
	# $FORCE - ovlivňuje jestli se má přepsat cílový soubor, nebo ne
	# $INDIRECT - ovlivňuje typ svazku
	# $EXTENSION - je přípona výchozích souborů
	echo $@
	if [ -f "$1" ] ; then
		if [ -f "$2" ] ; then 
			if [ ${FORCE} == "no" ] ; then
				echo "použiju djvmcvt"
				help existed "$2"
				exit 0
			else
				${DJVMCVT} -${INDIRECT} "$1" "$2"
			fi
		fi
	else
		if [ -f "$2" ] ; then 
			if [ ${FORCE} == "no" ] ; then
				help existed "$2"
				exit 0
			else
				rm -rf "$2"
			fi
		fi
		if [ ${RENAME} == "no" ] ; then
			echo "Výchozí soubory jsou identifikovány vzorkem a nepřejmenují se"
			for i in $(ls -1 | grep -E "([0-9])\1?$EXTENSION\$" | sed "s/$1//" | sort -n) ; do
				#echo "$2 $1$i"
				ORIGSOUBOR="$1$i"
				DJVUSOUBOR=${ORIGSOUBOR/$EXTENSION/.djvu}
				if [ -f "$ORIGSOUBOR" ] ; then
					if [ ! -f "$DJVUSOUBOR" ] ; then
						todjvu "$ORIGSOUBOR"
					fi
				fi
				if [ -f "$2" ] ; then
					${DJVM} -i "$2" "$DJVUSOUBOR"
				else
					${DJVM} -c "$2" "$DJVUSOUBOR"
				fi
			done 
		else
#		RENAME
			if [ "${RENAME}" == "0" ] ; then
				#echo "numerické číslování, název souborů se - až na číslo zachová "
				INPUT=""
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						NUMBER="${RAWNUMBER##+(0)}"
						if [ "${NUMBER}" == "" ] ; then
							TARGET="${INPUT}0${EXTENSION}"
						else
							TARGET="${INPUT}${NUMBER}${EXTENSION}"
						fi
						if [ "$3" ] ; then
							if [ "$TARGET" == "${VZOR}$3${EXTENSION}" ] ; then
								konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
							fi
						else
							konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
						fi
					done
#					echo "NUMERIC - soubor stejný"
			elif [ ! "${RENAME//0/}" ] ; then
				MAX="0"
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						if [ "${#RAWNUMBER}" -gt  "${#MAX}" ] ; then
							MAX="${RAWNUMBER}"
						fi
					done
				if [ "${#MAX}" -gt "${#RENAME}" ] ; then
					BASE="${MAX//[0-9]/0}"
				else
					BASE="${RENAME}"
				fi
				INPUT=""
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						NUMBER="${RAWNUMBER##+(0)}"
						if [ "${NUMBER}" == "" ] ; then
							TARGET="${INPUT}${BASE}${EXTENSION}"
						else
							TARGET="${INPUT}${BASE:0:$((${#BASE} - ${#NUMBER}))}${NUMBER}${EXTENSION}"
						fi
						if [ "$3" ] ; then
							if [ "$TARGET" == "${VZOR}$3${EXTENSION}" ] ; then
								konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
							fi
						else
							konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
						fi
					done
#				echo "BASE - soubor stejný"
			else
				# VZOR + BASE z RENAME
				VZOR="${RENAME%%+(0)}"
				BASE="${RENAME#$VZOR}"
				if [ "${#BASE}" == "1" ] ; then
					INPUT=""
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						NUMBER="${RAWNUMBER##+(0)}"
						if [ "${NUMBER}" == "" ] ; then
							TARGET="${VZOR}0${EXTENSION}"
						else
							TARGET="${VZOR}${NUMBER}${EXTENSION}"
						fi
						if [ "$3" ] ; then
							if [ "$TARGET" == "${VZOR}$3${EXTENSION}" ] ; then
								konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
							fi
						else
							konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
						fi
					done
#					echo "NUMERIC - vzor"
				else
					INPUT=""
					MAX="0"
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							echo "Soubor $i nevyhovuje zvolenému vzoru $1 přeskakuji jej" >> /dev/stderr
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						if [ "${#RAWNUMBER}" -gt  "${#MAX}" ] ; then
							MAX="${RAWNUMBER}"
						fi
					done
					ORIGBASE="${MAX//[0-9]/0}"
					if [ "${#ORIGBASE}" -gt "${#BASE}" ] ; then
						BASE="$ORIGBASE"
						echo "ORIGBASE - vzor"
					fi
					#	Seznam setříděný podle délky řetězců $(ls -1 $1* | grep -E "([0-9])\1?$EXTENSION\$" | sed "s/$1//" | sort -n)
					# for i in $(ls -1 | grep -E "([0-9])\1?$EXTENSION\$" | awk '{ print length, $0 }' | sort -n ) ; do
					INPUT=""
					for i in $(ls -1 $1*${EXTENSION} ) ; do
						if [ "$INPUT" == "" ] ; then
							INPUT="${i%%+([0-9${EXTENSION}.])}"
						elif [ "$INPUT" != "${i%%+([0-9${EXTENSION}.])}" ] ; then
							continue
						else
							echo "zpracuji $i" > /dev/null
						fi
						STRING="${i#${INPUT}}"
						RAWNUMBER="${STRING%${EXTENSION}}"
						NUMBER="${RAWNUMBER##+(0)}"
						if [ "${NUMBER}" == "" ] ; then
							TARGET="${VZOR}${BASE}${EXTENSION}"
						else
							TARGET="${VZOR}${BASE:0:$((${#BASE} - ${#NUMBER}))}${NUMBER}${EXTENSION}"
						fi
						if [ "$3" ] ; then
							if [ "$TARGET" == "${VZOR}$3${EXTENSION}" ] ; then
								konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
							fi
						else
							konvertor "$i" "${TARGET/${EXTENSION}/.djvu}"
						fi
					done
#					echo "VZOR BASE"
				fi
			fi
		fi
	fi
}

function fromxcf {
	if [ "${1##*.}" == "xcf" ] ; then
		TEMPORARY="/tmp/$WINDOWID$BASHPID"
		mkdir $TEMPORARY
		convert ${1} ${TEMPORARY}/test.png
		pushd $TEMPORARY
			BUNDLE=" "
			for i in $(ls -cr -1) ; do
				todjvu $i
				BUNDLE="$BUNDLE ${i/.png/.djvu}"
			done
			djvm -c out.djvu $BUNDLE
		popd
		mv $TEMPORARY/out.djvu ./
		rm -rf $TEMPORARY
	fi
}

function help {
	echo -n """[1mNápověda pro [1m[2m${0##*/}[0m : """
	case "$1" in
		exporttodjvu) echo """volba [1m-p[0m ([1m--page[0m)

  Extrakce DjVu stránky ze svazku

  [1m${0##*/}[0m ... {-p|--page} [yes|no] ...
  
  Prostřednictvím této volby lze zvolit zda se má, nebo nemá při akci
  [3mexport[23m z DjVu svazku exportovat i celá DjVu stránka. Pokud za volbou
  nenásleduje parametr, pak se automaticky předpokládá že ano (yes).
  Výchozí nastavení (no), lze implicitně změnit prostřednictvím
  uživatelského konfiguračního souboru umístěného v v adresáři:

    ${HOME}/.config/${NAME}/
"""
		;;
		exporttopng) echo """volba [1m[1m--img[0m

  [4mExtrakce obrazové vrstvy[24m DjVu stránky do bitmapového souboru

  [1m${0##*/}[0m ... --img [yes|no|<layer>] ...

  Je-li parametrem volby [3myes[23m, tak se bude při akci [2mexport[22m generovat z DjVu
  stránky plnobarevný bitmapový obrázek ve formátu PNG.
  V ostatních případech bude ve formátu PNM.

      [1m${0##*/}[0m --img background svazek.djvu export stranka.djvu
 
Použitelné parametry:
                 color - plnobarevná stránka
                 black - černobílá kresba
            foreground - vrstva popředí
            background - vrstva pozadí
                  mask - maska
  Je-li místo [3m'yes'[23m uvedeno [3m'background'[23m, bude při exportu stránky
  strana.djvu uložen obrázek pozadí pod jménem strana.background.pnm
  Výchozí nastavení lze implicitně změnit nastavením proměnné IMGPAGE
"""
		;;
		exporttoxml) echo """volba [1m-x[0m ([1m--xml[0m)

  Extrakce DjVu stránky ze svazku

  [1m${0##*/}[0m ... {-x|--xml} [yes|no] ...
  
  Prostřednictvím této volby lze zvolit zda se má, nebo nemá při akci
  [3mexport[23m z DjVu svazku exportovat i celá DjVu stránka. Pokud za volbou
  nenásleduje parametr, pak se automaticky předpokládá že ano (yes).
  Výchozí nastavení (no), lze implicitně změnit prostřednictvím
  uživatelského konfiguračního souboru umístěného v v adresáři:

    ${HOME}/.config/${NAME}/
"""
		;;
		exporttodsed) echo """volba [1m-d[0m ([1m--dsed[0m)

  Extrakce DjVu stránky ze svazku

  [1m${0##*/}[0m ... {-x|--xml} [yes|no] ...
  
  Prostřednictvím této volby lze zvolit zda se má, nebo nemá při akci
  [3mexport[23m z DjVu svazku exportovat i celá DjVu stránka. Pokud za volbou
  nenásleduje parametr, pak se automaticky předpokládá že ano (yes).
  Výchozí nastavení (no), lze implicitně změnit prostřednictvím
  uživatelského konfiguračního souboru umístěného v v adresáři:

    ${HOME}/.config/${NAME}/
"""
		;;
		exporttometa) echo """volba [1m-m[0m ([1m--meta[0m)

  Extrakce DjVu stránky ze svazku

  [1m${0##*/}[0m ... {-x|--xml} [yes|no] ...
  
  Prostřednictvím této volby lze zvolit zda se má, nebo nemá při akci
  [3mexport[23m z DjVu svazku exportovat i celá DjVu stránka. Pokud za volbou
  nenásleduje parametr, pak se automaticky předpokládá že ano (yes).
  Výchozí nastavení (no), lze implicitně změnit prostřednictvím
  uživatelského konfiguračního souboru umístěného v v adresáři:

    ${HOME}/.config/${NAME}/
"""
		;;
		exporttothumb) echo """volba [1m-t[0m ([1m--thumb[0m)

  Extrakce DjVu stránky ze svazku

  [1m${0##*/}[0m ... {-t|--thumb} [yes|no] ...
  
  Prostřednictvím této volby lze zvolit zda se má, nebo nemá při akci
  [3mexport[23m z DjVu svazku exportovat i celá DjVu stránka. Pokud za volbou
  nenásleduje parametr, pak se automaticky předpokládá že ano (yes).
  Výchozí nastavení (no), lze implicitně změnit prostřednictvím
  uživatelského konfiguračního souboru umístěného v v adresáři:

    ${HOME}/.config/${NAME}/
"""
		;;
		force) echo """volba [1m-f[0m ([1m--force[0m)

  Vynucení akce

  [1m${0##*/}[0m ... {-f|--force} ...
  
  Prostřednictvím této volby si lze vynutit realizaci akce.
  Výchozí nastavení (no), lze implicitně změnit na (yes) prostřednictvím
  uživatelského konfiguračního souboru umístěného v v adresáři:

    ${HOME}/.config/${NAME}/
"""
		;;
		indirect) echo"""
[1mVolba[0m
         --indirect Volba, kterou lze změnit výchozí typ vícestránkového 
                    DjVu svazku (bundeled)

  Volbu je třeba aplikovat pokud chcete rozbalit stvávající DjVu svazek 
  do podoby volného svazku, nebo pokud chcete při konverzi bitmapových
  souborů rovnou sestavit DjVu svazek jako volný

  Výhodou volného svazku je, že lze dodatečně upravovat jednotlivé stránky
  jako samostatné DjVu soubory, aniž by je bylo nutné exportovat.

  Pro finalizaci DjVu svazku je pak lepší svazek překonvertovat na typ
  bundled, kdy je vše zabaleno v jednom souboru
"""
		;;
		existed) echo """
  Soubor $2 existuje. Pokud se má přepsat, musí být
  uveden parametr -f (--force)
"""
		;;
		dpi) echo"""
[1mParametr[0m
         --dpi  <[2mčíslo[22m> Hodnota DPI, která se má použít při zpracování obrázku.
                               při konverzi. Optimální je zjistit hodnotu přímo ze vstupního
                               obrázku. Před nastavením této hodnoty pro finální konverzi. lze vyzkoušet
                               optimální nastavení na některém ze souborů s využitím parametru
                               --test

  Rozsah číselné hodnoty je od 72 do 6000 dpi. Výchozí hodnota 300 se použije 
  v případě, že parametr --dpi není vůbec uveden.
  Vliv dpi na zpracování obrazu..
"""
		;;
		level) echo"""
[1mParametr[0m
         -l|--level  <[2mčíslo[22m> Hodnota akceptovatelných ztrát u černobílé kresby
                               při konverzi. Před nastavením této hodnoty vyzkoušejte
                               optimální nastavení na některém ze souborů a s parametrem
                               --test

  Kromě číselné hodnoty, která musí být menší než 200 lze úroveň ztrát
  nastavit i pomocí některého z následujících parametrů - v případě že 
  jich bude uvedeno víc, má prioritu poslední z nich.

        --lossless     0 - žádné ztráty (default)
        --clean        1 - ignorují se body o velikosti 1 pixelu
        --lossy        100 - ignorují se plochy
"""
		;;
		keywords-export) echo """vytvoření xml, dsed a náhledu
  Export náhledu a textového obsahu DjVu souboru do externích souborů.

[1mSyntaxe[0m

  [1m${0##*/}[0m [volby] <svazek> export {<num>|<name>|all} [<dir>]

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku
         dir  - adresář do kterého má být výstup uložen

[3mPoznámka:[23m
  Je-li místo pořadového čísla stránky, nebo jejího názvu, uvedeno all tak
  se bude exportovat obsah textových vrstev celého DjVu svazku.
  Formát exportovaného souboru je ve výchozím stavu .xml, ale s využitím 
  volby -d (--dsed) lze textovou vrstvu exportovat i ve formátu pro djvused.
  Je-li uveden také parametr --thumb, bude vyexportován i náhled v .png
  Není-li uveden adresář, je použit aktuální adresář. Pro pojmenování souborů
  je využit název stránky v takové podobě, jak je uložen v DjVu svazku.
  Pokud již soubory se stejným názvem v adresáři existují, lze si vynutit
  jejich přepsání volbou -f (--force)
"""
		;;
		keywords-import) echo """
  Import textového obsahu DjVu souboru z externích souborů

[1mSyntaxe[0m

  [1m${0##*/}[0m [volby] <svazek> import <file> [<num>|<name>]

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku
         file - soubor s obsahem skryté textové vrstvy

[3mPoznámka:[23m
  Není-li uvedeno pořadové číslo stránky, nebo její název, tak se předpokládá
  že jde o obsah textové vrstvy celého DjVu svazku.
  Soubor je rozlišený podle přípony a může to být buď v .dsed nebo .xml
  formátu.
  Touto cestou lze importovat také XMP informace z .xmp souboru
"""
		;;
		keywords-delete) echo """akce [1mdelete[0m

  [4mOdstranění stránky[24m identifikované jménem, nebo pozicí v DjVu svazku

  [1m${0##*/}[0m [volby] <svazek> delete {<num>|<name>}

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku

[1mDávejte pozor[0m - akce je nevratná !
  Je doporučeno při odstraňování stránek použít jako identifikátor jméno
  stránky. A to z toho důvodu, že se pozice stránky může v průběhu
  zpracování DjVu svazku změnit, kdežto její jméno zůstává vždy v rámci
  svazku jedinečné.
"""
		;;
		keywords-info) echo """akce [1minfo[0m

  [4mVýpis informací o DjVu souboru[24m.

  [1m${0##*/}[0m [volby] <file> info [<num>|<name>]

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku
         file - jméno DjVu souboru
"""
		;;
		keywords-insert) echo """akce [1minsert[0m
  [4mVložení DjVu souboru do Djvu svazku[24m. Je-li na vstupu nekonvertovovaný
  obrázek, dojde ke konverzi. Není-li uvedena pozice, či jméno stránky před 
  kterou se má obsah vložit, připojí se na konec DjVu svazku. Předtím, je ale vyžadováno potvrzení akce, které lze obejít pouze použitím volby -f (--force)

  [1m${0##*/}[0m [volby] <svazek> insert <file> [<num>|<name>]

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku
         file - jméno DjVu souboru, nebo skenu

[3mPoznámka:[23m
  Pokud se již v DjVu souboru stránka se stejným názvem vyskytuje, dojde
  při vložení k přejmenování souboru - za název se přidá podtržítko
  a pořadové číslo výskytu. K takové situaci může dojít také v případě,
  že je operace [2minsert[22m zopakována se stejnými parametry. Pak se
  automaticky přidávané číslo postupně navyšuje.

              insert test01.jpg => test01.djvu
              insert test01.jpg => test01_1.djvu
              insert test01.jpg => test01_2.djvu
              ...
"""
		;;
		keywords-forward) echo """akce [1mforward[0m

  Přesun stránky v rámci DjVu svazku o pozici vpřed. [4mPřed stránku, která[24m
  [4mji má následovat[24m. V případě, už přesouvaná stránka je na první pozici,
  se nestane nic.

  [1m${0##*/}[0m [volby] <svazek> fore {<num>|<name>} [<num>|<name>]

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku

  Je doporučeno použít jako identifikátor jména stránek, místo jejich 
  aktuální pozice. A to z toho důvodu, že se pozice stránek mohou v průběhu
  zpracování DjVu svazku měnit, kdežto její jméno stránky je vždy v rámci
  svazku jedinečné.
"""
		;;
		keywords-back) echo """akce [1mback[0m

  Přesun stránky v rámci DjVu svazku o pozici zpět. [4mZa stránku, která[24m
  [4mji má následovat[24m. V případě, už je přesouvaná stránka na poslední pozici,
  se nestane nic.

  [1m${0##*/}[0m [volby] <svazek> back {<num>|<name>} [<num>|<name>]

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku

  Je doporučeno použít jako identifikátor jména stránek, místo jejich 
  aktuální pozice. A to z toho důvodu, že se pozice stránek mohou v průběhu
  zpracování DjVu svazku měnit, kdežto její jméno stránky je vždy v rámci
  svazku jedinečné.
"""
		;;
		keywords-rotate) echo """akce [1mrotate[0m

  [4mOtočení DjVu stránky[24m.

  [1m${0##*/}[0m [volby] <svazek> rotate {<num>|<name>} <value>

         num   - pořadové číslo stránky
         name  - jméno stránky
         value - parametr jak má být stránka natočena

[1mParametry[0m
  O - nastaví stránku do výchozí pozice
  1 - natočí stránku o 90° vpravo
  2 - natočí stránku vzůru nohama 
  3 - natočí stránku o 90° vlevo
  left - pootočí stránku o 90° směrem doleva
  right - pootočí stránku o 90° směrem doprava
  180 - pootočí stránku o 180°

[3mPoznámka:[23m
          Není-li uveden identifikátor stránky, je parametrem
          nastaveno globální natočení celého dokumentu.
"""
		;;
		keywords-set) echo """akce [1mset[0m

  [4mNastavení meta atributů[24m DjVu stránky, resp. celého svazku

  [1m${0##*/}[0m [volby] <svazek> set {<num>|<name>} {<file>|<key> <value>}

  [1m${0##*/}[0m [volby] <svazek> set {<file>|<key> <value>}

         num   - pořadové číslo stránky
         name  - jméno stránky
         file  - soubor s meta atributy
         key   - jméno meta atributu
         value - hodnota meta atributu

Nejběžnější atributy (key):
       Title - Název DjVu dikumentu
     Creator - Jméno tvůrce DjVu dokumentu
CreationDate - Čas vytvoření dokumentu
    Keywords - Klíčová slova pro indexaci DjVu dokumentu
      annote - Poznámka k dokumentu

[3mPoznámka:[23m
  Další viz akce [2mprint[22m, [2mexport[22m, [2mimport[22m, [2munset[22m a manuál k tomuto skriptu.
"""
		;;
		keywords-unset) echo """akce [1munset[0m

  [4mOdstranění meta atributů[24m DjVu stránky, resp. celého svazku

  [1m${0##*/}[0m [volby] <svazek> unset {<num>|<name>} <key>

  [1m${0##*/}[0m [volby] <svazek> unset <key>

         num   - pořadové číslo stránky
         name  - jméno stránky
         key   - jméno meta atributu

[1mDávejte pozor[0m - akce je nevratná !
  Akce dovoluje odstranit nejenom vybraný atribut, ale také všechny další,
  proto ji využívejte nanejvýš opatrně. S meta atributy pracujte raději
  prostřednictvím souborů zpracovávaných při akcích [2mexport[22m a [2mimport[22m.
  Pro ověření klíče, před jeho zrušením využijte akci [2mprint[22m. Nový obsah
  klíče lze nastavit přes akci [2mset[22m.
"""
		;;
		keywords-print) echo """akce [1mprint[0m

  [4mVýpis klíčů a jejich obsahu[24m z metainformací uložených v Djvu svazku.

  [1m${0##*/}[0m <svazek> print [all]
  [1m${0##*/}[0m <svazek> print <attr>
  [1m${0##*/}[0m <svazek> print {<num>|<name>} [all]
  [1m${0##*/}[0m <svazek> print {<num>|<name>} <attr>

         num  - pořadové číslo stránky v DjVu svazku
         name - jméno stránky v DjVu svazku
         attr - jméno atributu
         all  - klíčové slovo (vypsat vše)

[3mPoznámka:[23m
  Jednotlivé atributy lze nastavovat přes [2mset[22m, více atributů najednou
  lze do DjVu stránky či svazku importovat z externího souboru při
  akci [2mimport[22m. Metadata lze z DjVu souborů také exportovat ([2mexport[22m).
"""
		;;
		keywords) echo """
  [1m${0##*/}[0m [volby] {DjVu svazek} <keyword> [-h|...]

  [1m      keyword - popis akce[0m

         delete - odstraní stránku ze svazku
         insert - vloží novou stránku do svazku
     fore, back - přesune stránku v rámci svazku
         rotate - mění orientaci vybrané stránky
            set - nastavuje metainformace DjVu stránek a svazku
          print - vypisuje metainformace z DjVu stránek a svazku
          unset - odstraňuje metainformace DjVu stránek i svazku
         export - exportuje djvu stránku, dsed nebo xml soubor s obsahem
                  textové vrstvy, náhled stránky v png, atp.
         import - importuje do DjVu stránky či svazku obsah skryté textové
                  vrstvy z xml stránky
         rename - přejmenování stránek v DjVu souboru dle nastaveného vzoru

[3mPoznámka:[23m
          Pro podrobnější nápovědu použijte volbu -h za klíčovým slovem
"""
		;;
		rename) echo """
[1mParametr[0m
         -r|--rename  <[2mvzor[22m>  Vzor, podle jakého se mají přejmenovat
                              dílčí DjVu soubory, ze kterých se pak bude
                              sestavovat DjVu svazek.
[4mPopis:[24m
  Pomocí [2mvzoru[22m lze upravit názvy zkonvertovaných DjVu souborů
  před jejich sestavením do DjVu svazku. [2mVzor[22m může být tvořen:
    1, Pouze jednou, nebo více nulami - 000
    2, Nebo řetězcem, následovaným nulami - soubor_00

[3mPoznámka:[23m
  Je-li uvedena pouze jedna nula, budou stránky očíslovány [4mnumericky[24m,
  t.j. od čísla 1 dále. Je-li nul více, pak bude číslo interpretováno
  jako [4mřetězec[24m. tedy 001 a dále. Pokud by číslování stránek přesáhlo
  nastavený počet čísel, bude upraven dle maximálního čísla.

[3mUkázkové vzory : a výsledný efekt..[23m
   soubor-0000 : soubor-0001.djvu .. soubor-0123.djvu
   soubor_0    : soubor_1.djvu    .. soubor_123.djvu
   soubor000   : soubor0001.djvu  .. soubor1234.djvu
"""
			;;
		suffix) echo """
[1mParametr[0m
         -e|--ext  <[2msuffix[22m>  Přípona souborů, ze kterých se má sestavit 
                                DjVu soubor.
[4mPopis:[24m
  [2mSuffix[22m je nutné uvést pouze v případě, že soubory s názvem odpovídajícím
  vzorku dosud nebyly do DjVu zkonvertovány. Jinak se vždy předpokládá, že
  se bude pracovat s již konvertovanými DjVu soubory.

  Je-li [2msuffix[22m uveden, budou konvertovány soubory vyhovující vzorku.
  Pokud některé z nich již konvertovány byly, tak se se fáze konverze
  přeskočí. Pracuje se pak s již existujícím DjVu souborem.

  Konvertovány jsou pouze soubory, které chybí. Kvalitu konverze lze
  ovlivnit  dalšími parametry. Mají-li být soubory překonvertovány znovu,
  lze si to vynutit parametrem -f (--force) a stávající soubory  přepsat.

  Akceptované sufixy: 
     djvu (default), jpg, gif, png, bmp, pnm, pbm, pgm.
  Vícevrstvé soubory:
     xcf, tiff, pdf 
"""
			;;
		options) echo """
[1mPřehled akceptovaných voleb[0m: 
  -h|--help     Nápověda
  -b|--bundle   Výsledekm zpracování bude kompaktní svazek ( default)
  -d|--dsed     Při akci export ukládat obsah textové vrstvy do souboru .dsed
  -f|--force    Vynucení akce
  -i|--indirect Výsledekm zpracování bude volný svazek
  -m|--meta     Při akci export ukládat meta informace z DjVu stránky či svazku do soubor s příponou .meta
  -p|--page     Vytažení celé stránky z DjVu svazku
  -x|--xml      Při akci export ukládat obsah textové vrstvy do souboru .xml
  -t|--thumb    Vygenerování náhledů v DjVu svazku, resp. při akci export vytažení náhledu do souboru s příponou .thumb (obrazová vrstva, kódvaná v  IW44)

Parametrické volby:
   -n|--name    parametr zajistí, že se soubory přejmenují
   -r|--rename  řetězec, který se má použít k pojmenování souborů místo 
                stávajících názvů souborů při sestavení svazku 
                soubor_0000 - soubor_0001.djvu .. soubor_0123.djvu
                soubor_0 -    soubor_1.djvu ,, soubor_123.djvu
"""
		;;
		*) echo """
   Toto je nástroj pro práci s DjVu soubory a svazky.

      [1m${0##*/}[0m [volby] ... <akce>

 Nápovědu k volbám a jejich parametrům vypíše volba -h
 Přehled všech dostupných voleb vypíšete takto...

      [1m${0##*/}[0m -h -h

 Přehled akcí vypíšete takto...

      [1m${0##*/}[0m [volby] <soubor> -h
"""
		;;
	esac
}

function todjvu {
	# $1 - soubor ke konverzi
	# $2 - cílový DjVu soubor
	echo "todjvu: Konvertuji soubor $1 - do souboru $2" >> /dev/stderr
	echo "$(testfile ${1})" >> /dev/stderr
	if [ $(testfile ${1}) == "djvu" ] ; then
		echo "DjVu soubory nelze znovu konvertovat" >> /dev/stderr
		exit 1
	else
		if [ "${#ALG[@]}" -gt "1" ] ; then
			for i in ${ALG[@]} ; do 
				${DIDJVU} encode -o "${2/.djvu/.$i.djvu}" -d "${DPI-300}" ${LEVEL} -m "$i" "$1"
				getocr ${2/.djvu/.$i.djvu}
			done
		else
			if [ -f "${2}" ] ; then
				if [ "${FORCE}" == "yes" ] ; then
				log 1 "todjvu: Cílový soubor ${2} existuje, bude se přepisovat"
					${DIDJVU} encode -o "${2}" -d "${DPI-300}" ${LEVEL} -m "${ALG}" "${1}"
					getocr ${2}
				else
					echo "Mám přepsat cílový soubor ${2}?"
					potvrdit && ${DIDJVU} encode -o "${2}" -d "${DPI-300}" ${LEVEL} -m "${ALG}" "${1}"
					getocr ${2}
				fi
			else
				if [ ! -d "${2%/*}" ] ; then
					log 1 "todjvu: neexistuje adresář pro cílový soubor, musím ho vytvořit"
					mkdir -p "${2%/*}"
				fi
				log 1 "todjvu: konvertuji soubor ${1} do cílového souboru $2"
				echo "${DIDJVU} encode -o ${2} -d ${DPI-300} ${LEVEL} -m ${ALG} ${1}" >> /dev/stderr
				${DIDJVU} encode -o "${2}" -d "${DPI-300}" ${LEVEL} -m "${ALG}" "${1}"
				getocr ${2}
			fi
		fi
	fi
}

function todotest {
	for i in ${ALG[@]} ; do 
		${DIDJVU} encode -o "${1%.*}-$i.djvu" -d 300 -m "$i" "$1"
	done
}

function todoview {
	for i in ${ALG[@]} ; do 
		(${DJVIEW} ${1%.*}-$i.djvu &)
	done
}

function todjvuclassic {
    RANDOMKEY=$[ 8000 + $[ RANDOM % 1000 ]]
    TEMP_DIR="${TEMPDIR}/$WINDOWID$BASHPID$RANDOMKEY"
    mkdir $TEMP_DIR
    TEMP_IMG="$TEMP_DIR/temp.ppm"
    TEMP_MASK="$TEMP_DIR/mask.pbm"
    DJVU_MASK="$TEMP_DIR/mask.djvu"

    case ${1##*.} in
        tiff|tif) KONVERT="${TIFFTOPNM}";;
        png) KONVERT="${PNGTOPNM}";;
        jpg) KONVERT="${JPEGTOPNM}" ;;
    esac

    $KONVERT $1 | tee $TEMP_IMG | ${PPMTOPGM} | ${PGMTOPBM} -threshold -value 0.${3-5} | ${PNMTOPLAINPNM} > $TEMP_MASK;
    ${CJB2} -lossy -clean $TEMP_MASK $DJVU_MASK;
    ${DJVUMAKE} ${1/.png/.djvu} Sjbz=$DJVU_MASK PPM=$TEMP_IMG;
    getocr ${1/.png/.djvu}
    rm -rf $TEMP_DIR
}

# Zpracování parametrů předaných při startu skriptu
function main {
#local VSTUP="$@"
while [ $# -gt 0 ]
do case "$1" in
	-a|--algorithm) [ "$2" == "-h" ] && for i in ${ALG[@]} ; do 
					echo "$i"
				done && exit 0 || ALG="$2" ; shift
		;;
	-d|--dsed) if [ "$2" == "-h" ] ; then
				help exporttodsed && exit 0
			elif [ "${2}" == "yes" ] || [ "${2}" == "no" ] ; then
				DSED="${2}"
				shift
			else
				DSED="yes"
			fi
	;;
	-e|--ext) case "$2" in
			jpg|jpeg|png|tiff|pnm|pbm|gif|djvu) EXTENSION=".$2" && shift
				;;
				*) help suffix && exit 0
				;;
			esac
		;;
	-f|--force) if [ "$2" == "-h" ] ; then
				help force && exit 0
			else
				FORCE=yes
			fi
	;;
	--img) if [ "$2" == "-h" ] ; then
				help exporttopng && exit 0
			else
				case "${2}" in
					yes|no|color|black|foreground|background|mask) IMGPAGE="${2}" && shift
					;;
					*) IMGPAGE="yes"
					;;
				esac
			fi
		;;
	--dpi) if [ "$2" -ge "72" ] || [ "$2" -le "6000" ] ; then
				DPI="$2"
				shift
			else
				help dpi && exit 0
			fi
	;;
    -h) if [ "$2" == "-h" ] ; then
				help options
			else
				help
			fi
			exit 0
		;;
	--indirect) if [ "$2" == "-h" ] ; then
				help indirect && exit 0
			else
				INDIRECT=yes
			fi
	;;
	--clean) LEVEL="--loss-level=1"
	;;
	--lossy) LEVEL="--loss-level=100"
	;;
	--lossless) LEVEL="--loss-level=0"
	;;
	--loss-level) if [ "$2" -ge "0" ] || [ "$2" -lt "200" ] ; then
				LEVEL="--loss-level=1"
				shift
			else
				help level && exit 0
			fi
		;;
	--manual) [ -f $0.manual ] && less -R $0.manual
		exit 0
		;;
	-m|--meta) if [ "$2" == "-h" ] ; then
				help exporttometa && exit 0
			elif [ "${2}" == "yes" ] || [ "${2}" == "no" ] ; then
				EXTRACTMETA="${2}"
				shift
			else
				EXTRACTMETA="yes"
			fi
		;;
	--pdf) PDF2DJVU=$(which pdf2djvu)
[ ! ${PDF2DJVU} ] && echo 'Není nainstalován balík pdf2djvu, který je nezbytný pokud chcete provést přímou konverzi PDF souboru do DjVu formátu' && PDF2DJVU=false
	;;
	-o|--ocr) if [ "$2" == "-h" ] ; then
				help ocr && exit 0
			elif [ "${#2}" == "3" ] ; then
				OCR="$2"
				shift
			else
				OCR="ces"
			fi
		;;
	-p|--page) if [ "$2" == "-h" ] ; then
				help exporttodjvu && exit 0
			elif [ "${2}" == "yes" ] || [ "${2}" == "no" ] ; then
				EXTRACTPAGE="${2}"
				shift
			else
				EXTRACTPAGE="yes"
			fi
		;;
	-r|--rename) case "$2" in
		*0) RENAME="$2" && shift
				;;
		*) help rename && exit 0
			;;
		esac
		;;
	--test) TEST="yes"
			# Implementovat volby --test-conversion a --test-view
		;;
	--test-conversion) ALG="abutaleb bernsen brink djvu niblack otsu sauvola shading-subtraction"
		TEST="yes"
		;;
	--test-view) # Zobrazení testovacího souboru pomocí djview
			echo "Ještě neimplementováno"
			exit 100
			if [ -f "$2" ] ; then
				# Předává se soubor... obrázek či něco jiného?
				todoview "${2}"
			elif [ -d "$2" ] ; then
				# Předává se adresář
				echo "Ještě není implementováno"
			else
				$0 -h
				exit 0
			fi
		;;
	-x|--xml) if [ "$2" == "-h" ] ; then
				help exporttoxml && exit 0
			elif [ "${2}" == "yes" ] || [ "${2}" == "no" ] ; then
				XML="${2}"
				shift
			else
				XML="yes"
			fi
		;;
	-t|--thumb) if [ "$2" == "-h" ] ; then
				help exporttothumb && exit 0
			elif [ "${2}" == "yes" ] || [ "${2}" == "no" ] ; then
				THUMBNAIL="${2}"
				shift
			else
				THUMBNAIL="yes"
			fi
		;;
	*) #Předaný parametr není zachycen předchozích volbách
	# Může to být řetězec, nebo řetězec s mezerami
	# v takovém případě může být rozhodující výskyt klíčového slova ve zbytku...
	# Sjet ve smyčce zbytek příkazové řádky a otestovat ji na výskyt klíčového slova---
	# Přerušit..
#	echo "Předáno: ${VSTUP}" >> /dev/stderr
	local CHARSTRING="${@:1}"
	local CHARCOUNT=$((${#CHARSTRING} + 1))
	local CHARPOS=0
	local STRPOS=0
	while [ "${CHARCOUNT}" -gt "0" ] ; do
#		echo "${CHARSTRING}" >> /dev/stderr
		case "${CHARSTRING:0:$((${CHARPOS} - ${STRPOS}))}" in
			*.[dD][jJ][vV][uU]|*.[gG][iI][fF]|*.[jJ][pP][gG]|*.[mM][nN][gG]|*.[pP][dD][fF]|*.[pP][nN][gG]|*.[pP][nN][mM]|*.[tT][iI][fF][fF]|*.[xX][cC][fF]) local FILE="${CHARSTRING:0:$((${CHARPOS} - ${STRPOS}))}"
#				echo "Soubor... -${FILE}-" >> /dev/stderr
				local STRPOS="${CHARPOS}"
				local CHARSTRING="${CHARSTRING#${FILE}}"
#				echo "Zbytek.. ${CHARSTRING}" >> /dev/stderr
				local CHARCOUNT=$((${#CHARSTRING} + 1))
			;;
			\ back |\ delete |\ export |\ fore |\ import |\ info |\ print |\ rotate |\ set |\ unset ) local KEY="${CHARSTRING:0:$((${CHARPOS} - ${STRPOS}))}"
#				echo "Klíč.. ${KEY}" >> /dev/stderr
				local STRPOS="${CHARPOS}"
				local CHARSTRING="${CHARSTRING#${KEY}}"
#				echo "Zbytek.. ${CHARSTRING}" >> /dev/stderr
				break
				local CHARCOUNT=$((${#CHARSTRING} + 1))
			;;
		esac
		local CHARPOS=$((CHARPOS + 1))
		local CHARCOUNT=$((CHARCOUNT - 1))
	done
#	echo "Soubor se kterým budu pracovat: ${FILE}" >> /dev/stderr 
#	echo "Akce kterou chci realizovat: ${KEY}" >> /dev/stderr 
#	echo "Zbytek co jí předám: ${CHARSTRING}" >> /dev/stderr
	case "${CHARSTRING// /}" in
		*-h|*--help|-h*|--help*) if [ -z "${KEY}" ] ; then
				help
			else
				echo "keywords-${KEY// /}" >> /dev/stderr
				help "keywords-${KEY// /}"
			fi
			exit 77
		;;
	esac

	if [ -z "{FILE}" ] ; then
		# Nebyl předán soubor
#		echo "Ve zbytku může být cesta do adresáře..."
		if [ -d "${CHARSTRING}" ] ; then
			echo "Byl předán adresář ${CHARSTRING}" >> /dev/stderr
			echo "ToDo" >> /dev/stderr
			exit 0
		else
			echo "Byl předán neplatný řetězec ${CHARSTRING}" >> /dev/stderr
			exit 1
		fi
	else
#		local FILE="$(escape_path ${FILE})"
		local FILE=$(${REALPATH} "${FILE}")
		# Tady je k dispozici soubor ke zpracování...
		if [ -f "${FILE}" ] ; then
#			log 1 "main: Soubor -${FILE}- existuje.."
#			FILE=${FILE//\ /\\ }
			case $(testfile "${FILE}") in
				djvu)
					#echo "AKCE ${KEY}" >> /dev/stderr
					#echo "Parametry #${CHARSTRING}#" >> /dev/stderr
					case "${KEY// /}" in
						delete) deletepage "${FILE}" "${CHARSTRING}"
							exit 0
						;;
						insert) # ToDo - zpracovat ${CHARSTRING}
							exit 1
								if [ -f "${3}" ] ; then
								if [ $(testfile ${3}) == "djvu" ] ; then
									log 1 "main - insert: Soubor je typu djvu"
									local INSERTFILE=${3}
								else
									[ "${#ALG[@]}" == "1" ] || exit 32
									local INSERTFILE="$TEMPDIR/${3%.*}.djvu"
									todjvu ${3} ${INSERTFILE}
									if [ $? -gt "0" ] ; then
										echo "main - insert: Soubor ${3} se nepodařilo zkonvertovat do souboru ${INSERTFILE}" >> /dev/stderr
										exit 1
									fi
								fi
								# Určit pozici...
								local P=$(identifypage ${1} ${4})
								log 1 "main - insert: Cílová pozice je $P"
								if [ -z "${P}" ] ; then
									if [ -z "${4}" ] ; then
										echo "Připojení souboru ${INSERTFILE} na konec souboru ${1}" >> /dev/stderr
										insertpage ${1} ${INSERTFILE}
									else
										echo "Identifikátor ${4} je pro soubor ${1} neplatný" >> /dev/stderr
										exit 1
									fi
								else
									log 1 "main - insert: Vkládám ${INSERTFILE} na pozici $P"
									insertpage ${1} ${INSERTFILE} ${P}
								fi
							else
								echo "Akci insert lze použít pouze ke vložení souboru" >> /dev/stderr
								exit 1
							fi
							exit 0
						;;
						set) setmeta "${FILE}" "${CHARSTRING}"
							exit 0
						;;
						print) printmeta ${FILE} "${CHARSTRING}"
							exit 0
						;;
						unset) unsetmeta ${FILE} "${CHARSTRING}"
							exit 0
						;;
						fore)  # ToDo - zpracovat ${CHARSTRING}
							exit 1
								[ -f ${3} ] && echo "pro vložení nové stránky do souboru je určena akce insert" >> /dev/stderr && exit 1
#								echo "akce forvard ${1} - ${3} - ${4}" >> /dev/stderr
								forwardpage ${1} ${3} ${4}
								exit 0
							;;
						back)  # ToDo - zpracovat ${CHARSTRING}
							exit 1
							[ -f ${3} ] && echo "pro vložení nové stránky do souboru je určena akce insert" >> /dev/stderr && exit 1
								backpage ${1} ${3} ${4}
								exit 0
						;;
						rotate) rotatepage "${FILE}" "${CHARSTRING}"
								exit 0
						;;
						export)   # ToDo - zpracovat ${CHARSTRING}
							exit 1
								exportpage ${FILE} ${CHARSTRING}
								exit 0
							;;
						import)   # ToDo - zpracovat ${CHARSTRING}
							exit 1
							;;
						info) djvuinfo "${FILE}" "${CHARSTRING}"
								exit 0
							;;
						rename)   # ToDo - zpracovat ${CHARSTRING}
							exit 1
							;;
							*) help keywords && exit 0
							;;
						esac
				;;
				jpeg|png) echo "Bude se zpracovávat soubor v bitmapovém formátu"
					echo "ToDo"
					exit 1
				;;
				xcf|tiff|mng) echo "Jako druhý parametr je soubor ve vícevrstvém bitmapovém formátu. Zpracování těchto souborů není zatím implementováno" >> /dev/stderr
					exit 1
				;;
				xml|XML) echo "má-li první soubor příponu xml"
					echo "ToDo"
					exit 1
				;;
				unknown) echo "Pokud je soubor ${1} typu DjVU, může jít o tzv. SecureDjVu formát, který má kryptované vrstvy. S takovým souborem nelze s opensource nástroji pracovat." >> /dev/stderr
				exit 1
				;;
				*) echo "${FILE} : $(testfile ${FILE})" >> /dev/stderr
					echo '''Pokud následuje djvu soubor'''
					echo '''Pokud následuje adresář'''
					echo '''to je existující soubor typu bundle a:
					- nenásleduje žádný další existující soubor typu djvu, nebo adresář
					a zároveň existuje $DIRECTORY, pak to znamená že se má rozbalit
					- pokud následuje další soubor, pak to znamená že se má nějakým způsobem s tímto dalším souborem naložit. Je-li to:
					- djvu soubor, má se připojit
					- xml soubor, má se vložit
					- soubor typu dsed má se zpracovat
					- jiný soubor - obrázek, který se má převést a vložit
					'''
				

					echo "Zpracování souborů jako je $2 zatím není implementováno"
					exit 1
				;;
			esac
		log 1 "main: Tudy může projet pouze v případě, že položka ${1} je existující soubor a není odchycena některou z akcí"
		else
			echo "Chystáte se zpracovávat neexistující soubor ${FILE}" >> /dev/stderr
			echo "ToDo"
			exit 1
		fi
	fi
# xxxxxxx
echo '''
	elif [ -d "${1}" ] ; then
		log 1 "main: Sem spadne pouze existující adresář - to může znamenat, že se bude dále pracovat v něm, nebo s ním - záleží na dalších parametrech"
			DIRECTORY="${1:0:$((${#1}-1))}"
	elif [ -z "${2}" ] ; then
		log 1 "main: Sem se spadne, je-li následující položka prázdná"
	elif [ "${2}" == "-h" ] || [ "${2}" == "--help" ] ; then
		help
		exit 0
	else
		log 1 "main: Sem se spadne, pokud předcházející položka ${1} není adresář a nevede také existující soubor"
		echo "main: ${1} $(testfile ${1})" >> /dev/stderr
			if [ "${1:$((${#1}-1)):1}" == "/" ] ; then
				if [ "${2:$((${#2}-5))}" == ".djvu" ] ; then
					log 1 "main: Rozbalení DjVu svazku : První položka je jméno adresáře a druhá DjVu soubor, který se má rozbalit"
					djvuunbundle "$1" "$2" 
					exit 0
				else
					if [ -f "{2}" ] ; then
						log 1 "main: První položka je jméno adresáře a druhá jméno existujícího souboru, který není typu DjVu"
					else
						log 1 "main: První položka je jméno adresáře a druhá řetězec - pravděpodobně bude následovat položka třetí... to mohl být vzorek"
					fi
				fi
			elif [ "${2:$((${#2}-5))}" == ".djvu" ] ; then
				log 1 "main: Sestavení DjVu svazku - konverze, OCR, textové soubory, náhled, integrace a nakonec sestavení"
				# $1 vzorek
				# $2 jméno budoucího DjVu svazku
				# $2 číslo souboru, který se má zpracovat (není-li uvedeno, zpracují se všechny)
				djvubundle "$1" "$2" "$3"
				exit 0
			else
				log 1 "Sem to propadne, když soubor ${1} nebyl rozpoznán jako djvu soubor..."
				case "${2:$((${#2}-3))}" in
					tiff) echo "Soubor $1 se bude exportovat do souboru $2"
						;;
					pdf) echo "Soubor $1 se bude exportovat do souboru $2"
						;;
					xcf) echo "za řetězcem následuje jméno xcf souboru, takže pokud neexistuje $DIRECTORY, je $1 - jméno budoucího djvu souboru a $2 jméno vícevrstvého xcf souboru."
						echo "zavolat funkci pro konverzi xcf2djvu a skončit"
						exit 0
						;;
					mng) echo "Soubor $1 se bude exportovat do souboru $2"
						;;
					*) echo "Pokud zpracování příkazové řádky došlo až sem, tak to znamená, že je pravděpodobně chybně uvedené jméno DjVu souboru se kterým se má pracovat. Zkontrolujte, zda následující jméno skutečně odpovídá jménu souboru se kterým chcete pracovat - ${1}"
						exit 1
						;;
				esac
			fi
	fi
''' > /dev/null
# xxxxxxx
	;;
	esac
	shift
done
}

main "$*"

exit 0
